{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.4", "generated_at": "2023-06-02T13:08:50.512069Z", "invocation_id": "c7bc5702-9fff-4868-8eb7-e4d9cb3f905d", "env": {}, "project_id": "80a035c5caa7bfb9378465c4c70ed133", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.dbt_artifacts.dim_dbt__sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__sources"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "dim_dbt__sources"], "unique_id": "model.dbt_artifacts.dim_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__sources') }}\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "dim_dbt__sources.sql", "original_file_path": "models/dim_dbt__sources.sql", "name": "dim_dbt__sources", "alias": "dim_dbt__sources", "checksum": {"name": "sha256", "checksum": "319fceac4dee8ee048a99d857d27e5e70d499ef12718abed922ae0eee0f69313"}, "tags": [], "refs": [["stg_dbt__sources"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about sources.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__sources.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__sources.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2027001, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__sources\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.dim_dbt__sources"}, "model.dbt_artifacts.dim_dbt__snapshots": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshots"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "dim_dbt__snapshots"], "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshots') }}\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from snapshots", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "dim_dbt__snapshots.sql", "original_file_path": "models/dim_dbt__snapshots.sql", "name": "dim_dbt__snapshots", "alias": "dim_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "5513b505bb4f4c2f46b2ae1bc8d7fe6c292b4ab9e3db6e9676ecdc9c7a43e9e4"}, "tags": [], "refs": [["stg_dbt__snapshots"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about snapshots.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__snapshots.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__snapshots.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.229456, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__snapshots\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from snapshots", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.dim_dbt__snapshots"}, "model.dbt_artifacts.fct_dbt__snapshot_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshot_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "fct_dbt__snapshot_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshot_executions') }}\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from snapshot_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "fct_dbt__snapshot_executions.sql", "original_file_path": "models/fct_dbt__snapshot_executions.sql", "name": "fct_dbt__snapshot_executions", "alias": "fct_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "830d2f3e427951d935888842eb4bbe5e1b3d7fcc777c1486c270741f8656e6ff"}, "tags": [], "refs": [["stg_dbt__snapshot_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about snapshot executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__snapshot_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__snapshot_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2103648, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__snapshot_executions\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from snapshot_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.fct_dbt__snapshot_executions"}, "model.dbt_artifacts.fct_dbt__seed_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seed_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "fct_dbt__seed_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seed_executions') }}\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from seed_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "fct_dbt__seed_executions.sql", "original_file_path": "models/fct_dbt__seed_executions.sql", "name": "fct_dbt__seed_executions", "alias": "fct_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "8c9d23979c731cffdf6e9c2e500b05e73a4a4e84fb063f43a91e7e117eb0267c"}, "tags": [], "refs": [["stg_dbt__seed_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about seed executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__seed_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__seed_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.1965628, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__seed_executions\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from seed_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.fct_dbt__seed_executions"}, "model.dbt_artifacts.fct_dbt__test_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__test_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "fct_dbt__test_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__test_executions') }}\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from test_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "fct_dbt__test_executions.sql", "original_file_path": "models/fct_dbt__test_executions.sql", "name": "fct_dbt__test_executions", "alias": "fct_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "06aacebb693b69da55f9bc7ed12fef376e414e9d46afb24c704602bd267ba5fb"}, "tags": [], "refs": [["stg_dbt__test_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about test executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__test_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__test_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2226603, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__test_executions\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from test_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.fct_dbt__test_executions"}, "model.dbt_artifacts.dim_dbt__tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__tests"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "dim_dbt__tests"], "unique_id": "model.dbt_artifacts.dim_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__tests') }}\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "dim_dbt__tests.sql", "original_file_path": "models/dim_dbt__tests.sql", "name": "dim_dbt__tests", "alias": "dim_dbt__tests", "checksum": {"name": "sha256", "checksum": "157bb696979983cf36a9779e9a56f6f833de060191a4b867f3648afafa32fb71"}, "tags": [], "refs": [["stg_dbt__tests"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about tests.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__tests.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__tests.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.241858, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__tests\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.dim_dbt__tests"}, "model.dbt_artifacts.dim_dbt__seeds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seeds"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "dim_dbt__seeds"], "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seeds') }}\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from seeds", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "dim_dbt__seeds.sql", "original_file_path": "models/dim_dbt__seeds.sql", "name": "dim_dbt__seeds", "alias": "dim_dbt__seeds", "checksum": {"name": "sha256", "checksum": "16a76fa8d240b2014c6a230f5e3d1ad11bc58418ca059d3a23dd7d80cc5ef323"}, "tags": [], "refs": [["stg_dbt__seeds"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about seeds.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__seeds.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__seeds.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.216285, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__seeds\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from seeds", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.dim_dbt__seeds"}, "model.dbt_artifacts.dim_dbt__exposures": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__exposures"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "dim_dbt__exposures"], "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__exposures') }}\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from exposures", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "dim_dbt__exposures.sql", "original_file_path": "models/dim_dbt__exposures.sql", "name": "dim_dbt__exposures", "alias": "dim_dbt__exposures", "checksum": {"name": "sha256", "checksum": "cc507d11a4680a41d3c64c9c3835816d1440c5c969841c5d16539c4174ed0108"}, "tags": [], "refs": [["stg_dbt__exposures"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about exposures.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__exposures.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__exposures.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.168207, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__exposures\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from exposures", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.dim_dbt__exposures"}, "model.dbt_artifacts.fct_dbt__invocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__invocations"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "fct_dbt__invocations"], "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__invocations') }}\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from invocations", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "fct_dbt__invocations.sql", "original_file_path": "models/fct_dbt__invocations.sql", "name": "fct_dbt__invocations", "alias": "fct_dbt__invocations", "checksum": {"name": "sha256", "checksum": "03ad2d98f2bb14c728dfd1e77a3d882e271535779d024dc0a7be5ab44ce3d771"}, "tags": [], "refs": [["stg_dbt__invocations"]], "sources": [], "metrics": [], "description": "Fact model that contains data about invocations.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__invocations.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__invocations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.1790643, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__invocations\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from invocations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.fct_dbt__invocations"}, "model.dbt_artifacts.dim_dbt__models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "dim_dbt__models"], "unique_id": "model.dbt_artifacts.dim_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__models') }}\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from models", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "dim_dbt__models.sql", "original_file_path": "models/dim_dbt__models.sql", "name": "dim_dbt__models", "alias": "dim_dbt__models", "checksum": {"name": "sha256", "checksum": "6c5c24260386f0d2c2284d0f6844eb4d55d71bb302b17959d5efbb703b34ff46"}, "tags": [], "refs": [["stg_dbt__models"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about models.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__models.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2370625, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__models\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from models", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.dim_dbt__models"}, "model.dbt_artifacts.fct_dbt__model_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "fct_dbt__model_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from model_executions", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "fct_dbt__model_executions.sql", "original_file_path": "models/fct_dbt__model_executions.sql", "name": "fct_dbt__model_executions", "alias": "fct_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "94fec79fa05c95a2f8768b6869723ee1b4be4cd065f6b0c1d69c137455e9c908"}, "tags": [], "refs": [["stg_dbt__model_executions"]], "sources": [], "metrics": [], "description": "Fact model that contains data about model executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_affected": {"name": "bytes_affected", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__model_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__model_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.249901, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__model_executions\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        \n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from model_executions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.fct_dbt__model_executions"}, "model.dbt_artifacts.dim_dbt__current_models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "dim_dbt__current_models"], "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "raw_code": "with base as (\n    select *\n    from {{ ref('stg_dbt__models') }}\n),\n\nmodel_executions as (\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        {% if target.type == 'bigquery' %}\n        , model_executions.bytes_processed\n        {% endif %}\n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(case when was_full_refresh then bytes_processed end) as last_full_refresh_run_bytes_processed\n        {% endif %}\n        , max(query_completed_at) as last_run_completed_at\n        , max(total_node_runtime) as last_run_total_runtime\n        , max(rows_affected) as last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(bytes_processed) as last_run_bytes_processed\n        {% endif %}\n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_full_refresh_run_bytes_processed\n        {% endif %}\n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_run_bytes_processed\n        {% endif %}\n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "name": "dim_dbt__current_models", "alias": "dim_dbt__current_models", "checksum": {"name": "sha256", "checksum": "216edd27f1ec80eaaa536cc8c691f73f508a1367330102fa0dd14e203ad95385"}, "tags": [], "refs": [["stg_dbt__models"], ["stg_dbt__model_executions"]], "sources": [], "metrics": [], "description": "Dimension model that contains data about models' most recent successful runs", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "description": "Number of rows affected by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_bytes_processed": {"name": "last_full_refresh_run_bytes_processed", "description": "Number of bytes processed by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "description": "Total time spent executing the node's last full (non-incremental) run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_completed_at": {"name": "last_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_rows_affected": {"name": "last_run_rows_affected", "description": "Number of rows affected by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_bytes_processed": {"name": "last_run_bytes_processed", "description": "Number of bytes processed by the node's last run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_run_total_runtime": {"name": "last_run_total_runtime", "description": "Total time spent executing the node's last run (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__current_models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__current_models.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.1888812, "compiled_code": "with base as (\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__models\n),\n\nmodel_executions as (\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__model_executions\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        \n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        \n        , max(query_completed_at) as last_run_completed_at\n        , max(total_node_runtime) as last_run_total_runtime\n        , max(rows_affected) as last_run_rows_affected\n        \n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        \n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n        \n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.dim_dbt__current_models"}, "model.dbt_artifacts.stg_dbt__invocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.invocations"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__invocations"], "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('invocations') }}\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__invocations.sql", "original_file_path": "models/staging/stg_dbt__invocations.sql", "name": "stg_dbt__invocations", "alias": "stg_dbt__invocations", "checksum": {"name": "sha256", "checksum": "8fad1c836b8fa4f77766e35537b26cfddbe8869d47766bae2bd93676268a35ab"}, "tags": [], "refs": [["invocations"]], "sources": [], "metrics": [], "description": "Staging model that contains data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__invocations.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__invocations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.3031223, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.invocations\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__invocations"}, "model.dbt_artifacts.stg_dbt__snapshots": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.snapshots"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshots"], "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshots') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__snapshots.sql", "original_file_path": "models/staging/stg_dbt__snapshots.sql", "name": "stg_dbt__snapshots", "alias": "stg_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "9cfe08cd1d44f05fe4c7375be4c9ec3586c422d2463f9ecd8ed213c884fd6ea3"}, "tags": [], "refs": [["snapshots"]], "sources": [], "metrics": [], "description": "Staging model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshots.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__snapshots.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2938056, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.snapshots\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__snapshots"}, "model.dbt_artifacts.stg_dbt__exposures": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.exposures"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__exposures"], "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('exposures') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "name": "stg_dbt__exposures", "alias": "stg_dbt__exposures", "checksum": {"name": "sha256", "checksum": "4b75634a1747580443d2569853a110a8f54de2c582ec4286da2149dc47d02762"}, "tags": [], "refs": [["exposures"]], "sources": [], "metrics": [], "description": "Staging model that contains data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__exposures.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__exposures.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.3292034, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.exposures\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__exposures"}, "model.dbt_artifacts.stg_dbt__tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.tests"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__tests"], "unique_id": "model.dbt_artifacts.stg_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('tests') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__tests.sql", "original_file_path": "models/staging/stg_dbt__tests.sql", "name": "stg_dbt__tests", "alias": "stg_dbt__tests", "checksum": {"name": "sha256", "checksum": "5ad514d48ff33f157f03b002b6ab9ecc71cefd5c7f379f0cc1d1a1642b9ea70a"}, "tags": [], "refs": [["tests"]], "sources": [], "metrics": [], "description": "Staging model that contains metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__tests.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__tests.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.3221102, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.tests\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__tests"}, "model.dbt_artifacts.stg_dbt__model_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.model_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__model_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('model_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "name": "stg_dbt__model_executions", "alias": "stg_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "19750590159aaf4ae68aa500e767a597a9337594ec8d868eb0c20999885edc46"}, "tags": [], "refs": [["model_executions"]], "sources": [], "metrics": [], "description": "Staging model that contains data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bytes_processed": {"name": "bytes_processed", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__model_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__model_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2746491, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.model_executions\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        \n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__model_executions"}, "model.dbt_artifacts.stg_dbt__seed_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.seed_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seed_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seed_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__seed_executions.sql", "original_file_path": "models/staging/stg_dbt__seed_executions.sql", "name": "stg_dbt__seed_executions", "alias": "stg_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "1d650ca5899e6898cd52366a02daa791decbe6f6d9a6c108d7cf16a5f8760bc0"}, "tags": [], "refs": [["seed_executions"]], "sources": [], "metrics": [], "description": "Staging model that contains data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seed_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__seed_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.257967, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.seed_executions\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__seed_executions"}, "model.dbt_artifacts.stg_dbt__snapshot_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.snapshot_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshot_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshot_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__snapshot_executions.sql", "original_file_path": "models/staging/stg_dbt__snapshot_executions.sql", "name": "stg_dbt__snapshot_executions", "alias": "stg_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "cf91b7dec0eda54f6eeb3a8dabca2cd6fb2cc25f3fe781106b0633907e321441"}, "tags": [], "refs": [["snapshot_executions"]], "sources": [], "metrics": [], "description": "Staging model that contains data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshot_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__snapshot_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.3111346, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.snapshot_executions\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__snapshot_executions"}, "model.dbt_artifacts.stg_dbt__seeds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.seeds"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seeds"], "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seeds') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__seeds.sql", "original_file_path": "models/staging/stg_dbt__seeds.sql", "name": "stg_dbt__seeds", "alias": "stg_dbt__seeds", "checksum": {"name": "sha256", "checksum": "254252a12241cc10a03b77e6e9e8bd95d78d11fe045c2712fc84145ce6ec4422"}, "tags": [], "refs": [["seeds"]], "sources": [], "metrics": [], "description": "Stageing model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seeds.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__seeds.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2871764, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.seeds\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__seeds"}, "model.dbt_artifacts.stg_dbt__test_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.test_executions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__test_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('test_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "name": "stg_dbt__test_executions", "alias": "stg_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "797191f66bbad61537980c93c137e6727f9b19818d1604d65cf06355ba9256e4"}, "tags": [], "refs": [["test_executions"]], "sources": [], "metrics": [], "description": "Staging model that contains metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__test_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__test_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2813187, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.test_executions\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__test_executions"}, "model.dbt_artifacts.stg_dbt__sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.sources"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__sources"], "unique_id": "model.dbt_artifacts.stg_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('sources') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "name": "stg_dbt__sources", "alias": "stg_dbt__sources", "checksum": {"name": "sha256", "checksum": "8d800a3d89435c1e8084ff909187aae9c939ed4d29624681ade1902a5832922c"}, "tags": [], "refs": [["sources"]], "sources": [], "metrics": [], "description": "Staging model that contains data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__sources.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__sources.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.3171587, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.sources\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__sources"}, "model.dbt_artifacts.stg_dbt__models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.models"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "staging", "stg_dbt__models"], "unique_id": "model.dbt_artifacts.stg_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('models') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "name": "stg_dbt__models", "alias": "stg_dbt__models", "checksum": {"name": "sha256", "checksum": "695cdb1b9d949de928dd8c3f567eb83d48b2428af4daf756c539761d35139357"}, "tags": [], "refs": [["models"]], "sources": [], "metrics": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__models.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1685711332.2655926, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.models\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.stg_dbt__models"}, "model.dbt_artifacts.model_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "model_executions"], "unique_id": "model.dbt_artifacts.model_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    {% if target.type == 'bigquery' %}\n        cast(null as {{ type_int() }}) as bytes_processed,\n    {% endif %}\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/model_executions.sql", "original_file_path": "models/sources/model_executions.sql", "name": "model_executions", "alias": "model_executions", "checksum": {"name": "sha256", "checksum": "20f972085c4696fd8572832bad3f84de11c52d7a1189b1f97c371365472f0fd8"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/model_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/model_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.4078028, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    \n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as message,\n    cast(null as \n   OBJECT\n) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.model_executions"}, "model.dbt_artifacts.sources": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "sources"], "unique_id": "model.dbt_artifacts.sources", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as source_name,\n    cast(null as {{ type_string() }}) as loader,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as identifier,\n    cast(null as {{ type_string() }}) as loaded_at_field,\n    {% if target.type == 'snowflake' %}\n        cast(null as {{ type_array() }}) as freshness,\n    {% else %}\n        cast(null as {{ type_json() }}) as freshness,\n    {% endif %}\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/sources.sql", "original_file_path": "models/sources/sources.sql", "name": "sources", "alias": "sources", "checksum": {"name": "sha256", "checksum": "f8d87aca14dcb8ffa642843d3e556b13efd6bb3d58362975e5c968f9fc861bf9"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/sources.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/sources.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.3429432, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as source_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT) as loaded_at_field,\n    \n        cast(null as \n   ARRAY\n) as freshness,\n    \n    cast(null as \n   OBJECT\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.sources"}, "model.dbt_artifacts.exposures": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json", "macro.dbt_artifacts.type_array"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "exposures"], "unique_id": "model.dbt_artifacts.exposures", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as type,\n    cast(null as {{ type_json() }}) as owner,\n    cast(null as {{ type_string() }}) as maturity,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as description,\n    cast(null as {{ type_string() }}) as url,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/exposures.sql", "original_file_path": "models/sources/exposures.sql", "name": "exposures", "alias": "exposures", "checksum": {"name": "sha256", "checksum": "59f2264e121c43528b4611d4ea9d4c3da888a161bb503350d1aea9a1f23bbf00"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/exposures.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/exposures.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.3725867, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as type,\n    cast(null as \n   OBJECT\n) as owner,\n    cast(null as TEXT) as maturity,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as url,\n    cast(null as TEXT) as package_name,\n    cast(null as \n   ARRAY\n) as depends_on_nodes,\n    cast(null as \n   ARRAY\n) as tags,\n    cast(null as \n   OBJECT\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.exposures"}, "model.dbt_artifacts.snapshot_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "snapshot_executions"], "unique_id": "model.dbt_artifacts.snapshot_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/snapshot_executions.sql", "original_file_path": "models/sources/snapshot_executions.sql", "name": "snapshot_executions", "alias": "snapshot_executions", "checksum": {"name": "sha256", "checksum": "a950a775e1edfa911e72fd416af8d4abd03a19a24f11cc5be5c4533d28528351"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/snapshot_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/snapshot_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.350892, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as message,\n    cast(null as \n   OBJECT\n) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.snapshot_executions"}, "model.dbt_artifacts.seeds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "seeds"], "unique_id": "model.dbt_artifacts.seeds", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/seeds.sql", "original_file_path": "models/sources/seeds.sql", "name": "seeds", "alias": "seeds", "checksum": {"name": "sha256", "checksum": "a2e1c5900b329167821b2c87c311566088a9242e201deccfcfd0763623d3be35"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for metadata about seed executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/seeds.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/seeds.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.3788078, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as \n   OBJECT\n) as meta,\n    cast(null as TEXT) as alias,\n    cast(null as \n   OBJECT\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.seeds"}, "model.dbt_artifacts.test_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "test_executions"], "unique_id": "model.dbt_artifacts.test_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_int() }}) as failures,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/test_executions.sql", "original_file_path": "models/sources/test_executions.sql", "name": "test_executions", "alias": "test_executions", "checksum": {"name": "sha256", "checksum": "85dfa5bab46258c9b1e56dd23e2ee718b755b32287955c734961c79bf5c475dd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/test_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/test_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.394795, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as INT) as failures,\n    cast(null as TEXT) as message,\n    cast(null as \n   OBJECT\n) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.test_executions"}, "model.dbt_artifacts.models": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "models"], "unique_id": "model.dbt_artifacts.models", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/models.sql", "original_file_path": "models/sources/models.sql", "name": "models", "alias": "models", "checksum": {"name": "sha256", "checksum": "ffe4b333a0411016c2051e32b9179da915a7b91677d61a407863d21bcf5c0440"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/models.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/models.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.3367126, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as \n   ARRAY\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as TEXT) as materialization,\n    cast(null as \n   ARRAY\n) as tags,\n    cast(null as \n   OBJECT\n) as meta,\n    cast(null as TEXT) as alias,\n    cast(null as \n   OBJECT\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.models"}, "model.dbt_artifacts.invocations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "invocations"], "unique_id": "model.dbt_artifacts.invocations", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as dbt_version,\n    cast(null as {{ type_string() }}) as project_name,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as dbt_command,\n    cast(null as {{ type_boolean() }}) as full_refresh_flag,\n    cast(null as {{ type_string() }}) as target_profile_name,\n    cast(null as {{ type_string() }}) as target_name,\n    cast(null as {{ type_string() }}) as target_schema,\n    cast(null as {{ type_int() }}) as target_threads,\n    cast(null as {{ type_string() }}) as dbt_cloud_project_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_job_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason_category,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason,\n    cast(null as {{ type_json() }}) as env_vars,\n    cast(null as {{ type_json() }}) as dbt_vars,\n    cast(null as {{ type_json() }}) as invocation_args,\n    cast(null as {{ type_json() }}) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/invocations.sql", "original_file_path": "models/sources/invocations.sql", "name": "invocations", "alias": "invocations", "checksum": {"name": "sha256", "checksum": "0cb88835ee9f206b5dd1ff7c74f34e3f6e5027cc6d12edd140568187ccb0f4f4"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/invocations.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/invocations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.3880944, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as dbt_version,\n    cast(null as TEXT) as project_name,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as dbt_command,\n    cast(null as BOOLEAN) as full_refresh_flag,\n    cast(null as TEXT) as target_profile_name,\n    cast(null as TEXT) as target_name,\n    cast(null as TEXT) as target_schema,\n    cast(null as INT) as target_threads,\n    cast(null as TEXT) as dbt_cloud_project_id,\n    cast(null as TEXT) as dbt_cloud_job_id,\n    cast(null as TEXT) as dbt_cloud_run_id,\n    cast(null as TEXT) as dbt_cloud_run_reason_category,\n    cast(null as TEXT) as dbt_cloud_run_reason,\n    cast(null as \n   OBJECT\n) as env_vars,\n    cast(null as \n   OBJECT\n) as dbt_vars,\n    cast(null as \n   OBJECT\n) as invocation_args,\n    cast(null as \n   OBJECT\n) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.invocations"}, "model.dbt_artifacts.snapshots": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "snapshots"], "unique_id": "model.dbt_artifacts.snapshots", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as strategy,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/snapshots.sql", "original_file_path": "models/sources/snapshots.sql", "name": "snapshots", "alias": "snapshots", "checksum": {"name": "sha256", "checksum": "66c3865f2c4135f7b7aa1589e6030754242f1315acfb4de786ac282022d6d46d"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for metadata about seed executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/snapshots.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/snapshots.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.3579319, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as \n   ARRAY\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as TEXT) as strategy,\n    cast(null as \n   OBJECT\n) as meta,\n    cast(null as TEXT) as alias,\n    cast(null as \n   OBJECT\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.snapshots"}, "model.dbt_artifacts.seed_executions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "seed_executions"], "unique_id": "model.dbt_artifacts.seed_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/seed_executions.sql", "original_file_path": "models/sources/seed_executions.sql", "name": "seed_executions", "alias": "seed_executions", "checksum": {"name": "sha256", "checksum": "a950a775e1edfa911e72fd416af8d4abd03a19a24f11cc5be5c4533d28528351"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/seed_executions.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/seed_executions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.3661244, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as message,\n    cast(null as \n   OBJECT\n) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.seed_executions"}, "model.dbt_artifacts.tests": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413", "fqn": ["dbt_artifacts", "sources", "tests"], "unique_id": "model.dbt_artifacts.tests", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as test_path,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "sources/tests.sql", "original_file_path": "models/sources/tests.sql", "name": "tests", "alias": "tests", "checksum": {"name": "sha256", "checksum": "75d2daebf2f8d4e4420f7dc42c2378d2b39a45bf4a4e5453b8d1a568d325ea7c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Base model for metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/tests.yml", "compiled_path": "target/compiled/dbt_artifacts/models/sources/tests.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1685711332.3997767, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as name,\n    cast(null as \n   ARRAY\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as test_path,\n    cast(null as \n   ARRAY\n) as tags,\n    cast(null as \n   OBJECT\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__adf735861224874ff84ce59e5c4ae287b7856413.tests"}}, "sources": {}, "macros": {"macro.dbt_artifacts.generate_surrogate_key": {"unique_id": "macro.dbt_artifacts.generate_surrogate_key", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/generate_surrogate_key.sql", "original_file_path": "macros/generate_surrogate_key.sql", "name": "generate_surrogate_key", "macro_sql": "\n\n{%- macro generate_surrogate_key(field_list) -%}\n    {# Note - update the reference to `dbt_utils` to `dbt_artifacts` here #}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_artifacts')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.5580218, "supported_languages": null}, "macro.dbt_artifacts.default__generate_surrogate_key": {"unique_id": "macro.dbt_artifacts.default__generate_surrogate_key", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/generate_surrogate_key.sql", "original_file_path": "macros/generate_surrogate_key.sql", "name": "default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{# Note - Removed this logic to retain consistency with the previous surrogate_key logic #}\n{# {%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%} #}\n{%- set default_null_value = \"\" -%}\n{# {%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%} #}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.5595152, "supported_languages": null}, "macro.dbt_artifacts.upload_seed_executions": {"unique_id": "macro.dbt_artifacts.upload_seed_executions", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "upload_seed_executions", "macro_sql": "{% macro upload_seed_executions(results) -%}\n    {% set seeds = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"seed\" %}\n            {% do seeds.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_seed_executions_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.5707576, "supported_languages": null}, "macro.dbt_artifacts.default__get_seed_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "default__get_seed_executions_dml_sql", "macro_sql": "{% macro default__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.5789094, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "bigquery__get_seed_executions_dml_sql", "macro_sql": "{% macro bigquery__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                parse_json('{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}') {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.5837543, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_seed_executions.sql", "original_file_path": "macros/upload_seed_executions.sql", "name": "snowflake__get_seed_executions_dml_sql", "macro_sql": "{% macro snowflake__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.591618, "supported_languages": null}, "macro.dbt_artifacts.upload_tests": {"unique_id": "macro.dbt_artifacts.upload_tests", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "upload_tests", "macro_sql": "{% macro upload_tests(tests) -%}\n    {{ return(adapter.dispatch('get_tests_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_tests_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.5954866, "supported_languages": null}, "macro.dbt_artifacts.default__get_tests_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_tests_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "default__get_tests_dml_sql", "macro_sql": "{% macro default__get_tests_dml_sql(tests) -%}\n\n    {% if tests != [] %}\n        {% set test_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(5)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(8)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(9)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ test.name }}', {# name #}\n                '{{ tojson(test.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ test.package_name }}', {# package_name #}\n                '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                '{{ tojson(test.tags) }}', {# tags #}\n                '{{ tojson(test) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_fields #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.599751, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_tests_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_tests_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_tests.sql", "original_file_path": "macros/upload_tests.sql", "name": "bigquery__get_tests_dml_sql", "macro_sql": "{% macro bigquery__get_tests_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_values %}\n            {% for test in tests -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ test.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ test.name }}', {# name #}\n                    {{ tojson(test.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ test.package_name }}', {# package_name #}\n                    '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                    {{ tojson(test.tags) }}, {# tags #}\n                    parse_json('{{ tojson(test) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}') {# all_fields #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6019742, "supported_languages": null}, "macro.dbt_artifacts.get_relation": {"unique_id": "macro.dbt_artifacts.get_relation", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "name": "get_relation", "macro_sql": "{% macro get_relation(get_relation_name) %}\n    {% if execute %}\n        {% set model_get_relation_node = graph.nodes.values() | selectattr('name', 'equalto', get_relation_name) | first %}\n        {% set relation = api.Relation.create(\n            database = model_get_relation_node.database,\n            schema = model_get_relation_node.schema,\n            identifier = model_get_relation_node.alias\n        )\n        %}\n        {% do return(relation) %}\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6108575, "supported_languages": null}, "macro.dbt_artifacts.upload_results": {"unique_id": "macro.dbt_artifacts.upload_results", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_results.sql", "original_file_path": "macros/upload_results.sql", "name": "upload_results", "macro_sql": "{% macro upload_results(results) -%}\n\n    {% if execute %}\n\n        {% if results != [] %}\n            {% do log(\"Uploading model executions\", true) %}\n            {% set model_executions = dbt_artifacts.get_relation('model_executions') %}\n            {% set content_model_executions = dbt_artifacts.upload_model_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=model_executions.database,\n                schema_name=model_executions.schema,\n                table_name=model_executions.identifier,\n                content=content_model_executions\n                )\n            }}\n\n            {% do log(\"Uploading seed executions\", true) %}\n            {% set seed_executions = dbt_artifacts.get_relation('seed_executions') %}\n            {% set content_seed_executions = dbt_artifacts.upload_seed_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=seed_executions.database,\n                schema_name=seed_executions.schema,\n                table_name=seed_executions.identifier,\n                content=content_seed_executions\n                )\n            }}\n\n            {% do log(\"Uploading snapshot executions\", true) %}\n            {% set snapshot_executions = dbt_artifacts.get_relation('snapshot_executions') %}\n            {% set content_snapshot_executions = dbt_artifacts.upload_snapshot_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=snapshot_executions.database,\n                schema_name=snapshot_executions.schema,\n                table_name=snapshot_executions.identifier,\n                content=content_snapshot_executions\n                )\n            }}\n\n            {% do log(\"Uploading test executions\", true) %}\n            {% set test_executions = dbt_artifacts.get_relation('test_executions') %}\n            {% set content_test_executions = dbt_artifacts.upload_test_executions(results) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=test_executions.database,\n                schema_name=test_executions.schema,\n                table_name=test_executions.identifier,\n                content=content_test_executions\n                )\n            }}\n\n        {% endif %}\n\n        {% do log(\"Uploading exposures\", true) %}\n        {% set exposures = dbt_artifacts.get_relation('exposures') %}\n        {% set content_exposures = dbt_artifacts.upload_exposures(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=exposures.database,\n            schema_name=exposures.schema,\n            table_name=exposures.identifier,\n            content=content_exposures\n            )\n        }}\n\n        {% do log(\"Uploading tests\", true) %}\n        {% set tests = dbt_artifacts.get_relation('tests') %}\n        {% set tests_set = [] %}\n        {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\") %}\n            {% do tests_set.append(node) %}\n        {% endfor %}\n        {# upload tests in chunks of 5000 tests (300 for BigQuery), or less #}\n        {% set upload_limit = 300 if target.type == 'bigquery' else 5000 %}\n        {% for i in range(0, tests_set | length, upload_limit) -%}\n            {% set content_tests = dbt_artifacts.upload_tests(tests_set[i: i + upload_limit]) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=tests.database,\n                schema_name=tests.schema,\n                table_name=tests.identifier,\n                content=content_tests\n                )\n            }}\n        {%- endfor %}\n\n        {% do log(\"Uploading seeds\", true) %}\n        {% set seeds = dbt_artifacts.get_relation('seeds') %}\n        {% set content_seeds = dbt_artifacts.upload_seeds(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=seeds.database,\n            schema_name=seeds.schema,\n            table_name=seeds.identifier,\n            content=content_seeds\n            )\n        }}\n\n        {% do log(\"Uploading models\", true) %}\n        {% set models = dbt_artifacts.get_relation('models') %}\n        {% set models_set = [] %}\n        {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"model\") %}\n            {% do models_set.append(node) %}\n        {% endfor %}\n        {% set upload_limit = 50 if target.type == 'bigquery' else 100 %}\n        {% for i in range(0, models_set | length, upload_limit) -%}\n            {% set content_models = dbt_artifacts.upload_models(models_set[i: i + upload_limit]) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=models.database,\n                schema_name=models.schema,\n                table_name=models.identifier,\n                content=content_models\n                )\n            }}\n        {%- endfor %}\n\n        {% do log(\"Uploading sources\", true) %}\n        {% set sources = dbt_artifacts.get_relation('sources') %}\n        {% set sources_set = [] %}\n        {% for node in graph.sources.values() %}\n            {% do sources_set.append(node) %}\n        {% endfor %}\n        {# upload sources in chunks of 5000 sources (300 for BigQuery), or less #}\n        {% set upload_limit = 300 if target.type == 'bigquery' else 5000 %}\n        {% for i in range(0, sources_set | length, upload_limit) -%}\n            {% set content_sources = dbt_artifacts.upload_sources(sources_set[i: i + upload_limit]) %}\n            {{ dbt_artifacts.insert_into_metadata_table(\n                database_name=sources.database,\n                schema_name=sources.schema,\n                table_name=sources.identifier,\n                content=content_sources\n                )\n            }}\n        {%- endfor %}\n\n        {% do log(\"Uploading snapshots\", true) %}\n        {% set snapshots = dbt_artifacts.get_relation('snapshots') %}\n        {% set content_snapshots = dbt_artifacts.upload_snapshots(graph) %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=snapshots.database,\n            schema_name=snapshots.schema,\n            table_name=snapshots.identifier,\n            content=content_snapshots\n            )\n        }}\n\n        {% do log(\"Uploading invocations\", true) %}\n        {% set invocations = dbt_artifacts.get_relation('invocations') %}\n        {% set content_invocations = dbt_artifacts.upload_invocations() %}\n        {{ dbt_artifacts.insert_into_metadata_table(\n            database_name=invocations.database,\n            schema_name=invocations.schema,\n            table_name=invocations.identifier,\n            content=content_invocations\n            )\n        }}\n\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.get_relation", "macro.dbt_artifacts.upload_model_executions", "macro.dbt_artifacts.insert_into_metadata_table", "macro.dbt_artifacts.upload_seed_executions", "macro.dbt_artifacts.upload_snapshot_executions", "macro.dbt_artifacts.upload_test_executions", "macro.dbt_artifacts.upload_exposures", "macro.dbt_artifacts.upload_tests", "macro.dbt_artifacts.upload_seeds", "macro.dbt_artifacts.upload_models", "macro.dbt_artifacts.upload_sources", "macro.dbt_artifacts.upload_snapshots", "macro.dbt_artifacts.upload_invocations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6239378, "supported_languages": null}, "macro.dbt_artifacts.insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "insert_into_metadata_table", "macro_sql": "{% macro insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% if content != \"\" %}\n        {{ return(adapter.dispatch('insert_into_metadata_table', 'dbt_artifacts')(database_name, schema_name, table_name, content)) }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__insert_into_metadata_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6267562, "supported_languages": null}, "macro.dbt_artifacts.spark__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.spark__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "spark__insert_into_metadata_table", "macro_sql": "{% macro spark__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {% if database_name %}{{ database_name }}.{% endif %}{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6275704, "supported_languages": null}, "macro.dbt_artifacts.snowflake__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.snowflake__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "snowflake__insert_into_metadata_table", "macro_sql": "{% macro snowflake__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n    {% set insert_into_table_query %}\n    insert into {{database_name}}.{{ schema_name }}.{{ table_name }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6282613, "supported_languages": null}, "macro.dbt_artifacts.bigquery__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.bigquery__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "bigquery__insert_into_metadata_table", "macro_sql": "{% macro bigquery__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n\n        {% set insert_into_table_query %}\n        insert into `{{database_name}}.{{ schema_name }}.{{ table_name }}`\n        VALUES\n        {{ content }}\n        {% endset %}\n\n        {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6289546, "supported_languages": null}, "macro.dbt_artifacts.default__insert_into_metadata_table": {"unique_id": "macro.dbt_artifacts.default__insert_into_metadata_table", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/insert_into_metadata_table.sql", "original_file_path": "macros/insert_into_metadata_table.sql", "name": "default__insert_into_metadata_table", "macro_sql": "{% macro default__insert_into_metadata_table(database_name, schema_name, table_name, content) -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6292248, "supported_languages": null}, "macro.dbt_artifacts.upload_sources": {"unique_id": "macro.dbt_artifacts.upload_sources", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "upload_sources", "macro_sql": "{% macro upload_sources(sources) -%}\n    {{ return(adapter.dispatch('get_sources_dml_sql', 'dbt_artifacts')(sources)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_sources_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6340187, "supported_languages": null}, "macro.dbt_artifacts.default__get_sources_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_sources_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "default__get_sources_dml_sql", "macro_sql": "{% macro default__get_sources_dml_sql(sources) -%}\n\n    {% if sources != [] %}\n        {% set source_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(11)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for source in sources -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ source.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ source.database }}', {# database #}\n                '{{ source.schema }}', {# schema #}\n                '{{ source.source_name }}', {# source_name #}\n                '{{ source.loader }}', {# loader #}\n                '{{ source.name }}', {# name #}\n                '{{ source.identifier }}', {# identifier #}\n                '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                '{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}', {# freshness #}\n                '{{ tojson(source) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6390607, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_sources_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_sources_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_sources.sql", "original_file_path": "macros/upload_sources.sql", "name": "bigquery__get_sources_dml_sql", "macro_sql": "{% macro bigquery__get_sources_dml_sql(sources) -%}\n    {% if sources != [] %}\n        {% set source_values %}\n            {% for source in sources -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ source.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ source.database }}', {# database #}\n                    '{{ source.schema }}', {# schema #}\n                    '{{ source.source_name }}', {# source_name #}\n                    '{{ source.loader }}', {# loader #}\n                    '{{ source.name }}', {# name #}\n                    '{{ source.identifier }}', {# identifier #}\n                    '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                    parse_json('{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}'),  {# freshness #}\n                    parse_json('{{ tojson(source) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', wide_number_mode=>'round') {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6416109, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshot_executions": {"unique_id": "macro.dbt_artifacts.upload_snapshot_executions", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "upload_snapshot_executions", "macro_sql": "{% macro upload_snapshot_executions(results) -%}\n    {% set snapshots = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"snapshot\" %}\n            {% do snapshots.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_snapshot_executions_dml_sql', 'dbt_artifacts')(snapshots)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.652775, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "default__get_snapshot_executions_dml_sql", "macro_sql": "{% macro default__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6605089, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "bigquery__get_snapshot_executions_dml_sql", "macro_sql": "{% macro bigquery__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                parse_json('{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}') {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.665119, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_snapshot_executions.sql", "original_file_path": "macros/upload_snapshot_executions.sql", "name": "snowflake__get_snapshot_executions_dml_sql", "macro_sql": "{% macro snowflake__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6729772, "supported_languages": null}, "macro.dbt_artifacts.type_boolean": {"unique_id": "macro.dbt_artifacts.type_boolean", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_boolean", "macro_sql": "{% macro type_boolean() %}\n    {{ return(adapter.dispatch('type_boolean', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6744676, "supported_languages": null}, "macro.dbt_artifacts.default__type_boolean": {"unique_id": "macro.dbt_artifacts.default__type_boolean", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_boolean", "macro_sql": "{% macro default__type_boolean() %}\n   {{ return(api.Column.translate_type(\"boolean\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6748705, "supported_languages": null}, "macro.dbt_artifacts.type_json": {"unique_id": "macro.dbt_artifacts.type_json", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_json", "macro_sql": "{% macro type_json() %}\n    {{ return(adapter.dispatch('type_json', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.675296, "supported_languages": null}, "macro.dbt_artifacts.default__type_json": {"unique_id": "macro.dbt_artifacts.default__type_json", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_json", "macro_sql": "{% macro default__type_json() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6756778, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_json": {"unique_id": "macro.dbt_artifacts.snowflake__type_json", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "snowflake__type_json", "macro_sql": "{% macro snowflake__type_json() %}\n   OBJECT\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.675887, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_json": {"unique_id": "macro.dbt_artifacts.bigquery__type_json", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "bigquery__type_json", "macro_sql": "{% macro bigquery__type_json() %}\n   JSON\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6760767, "supported_languages": null}, "macro.dbt_artifacts.type_array": {"unique_id": "macro.dbt_artifacts.type_array", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "type_array", "macro_sql": "{% macro type_array() %}\n    {{ return(adapter.dispatch('type_array', 'dbt_artifacts')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6764867, "supported_languages": null}, "macro.dbt_artifacts.default__type_array": {"unique_id": "macro.dbt_artifacts.default__type_array", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "default__type_array", "macro_sql": "{% macro default__type_array() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6768708, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_array": {"unique_id": "macro.dbt_artifacts.snowflake__type_array", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "snowflake__type_array", "macro_sql": "{% macro snowflake__type_array() %}\n   ARRAY\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.677064, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_array": {"unique_id": "macro.dbt_artifacts.bigquery__type_array", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/type_helpers.sql", "original_file_path": "macros/type_helpers.sql", "name": "bigquery__type_array", "macro_sql": "{% macro bigquery__type_array() %}\n   ARRAY<string>\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6772563, "supported_languages": null}, "macro.dbt_artifacts.parse_json": {"unique_id": "macro.dbt_artifacts.parse_json", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "parse_json", "macro_sql": "{% macro parse_json(field) -%}\n  {{ return(adapter.dispatch('parse_json')(field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.678325, "supported_languages": null}, "macro.dbt_artifacts.default__parse_json": {"unique_id": "macro.dbt_artifacts.default__parse_json", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "default__parse_json", "macro_sql": "{% macro default__parse_json(field) -%}\n    {{ field }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6785834, "supported_languages": null}, "macro.dbt_artifacts.snowflake__parse_json": {"unique_id": "macro.dbt_artifacts.snowflake__parse_json", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "snowflake__parse_json", "macro_sql": "{% macro snowflake__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6788542, "supported_languages": null}, "macro.dbt_artifacts.bigquery__parse_json": {"unique_id": "macro.dbt_artifacts.bigquery__parse_json", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/parse_json.sql", "original_file_path": "macros/parse_json.sql", "name": "bigquery__parse_json", "macro_sql": "{% macro bigquery__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6791193, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshots": {"unique_id": "macro.dbt_artifacts.upload_snapshots", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "upload_snapshots", "macro_sql": "{% macro upload_snapshots(graph) -%}\n    {% set snapshots = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"snapshot\") %}\n        {% do snapshots.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_snapshots_dml_sql', 'dbt_artifacts')(snapshots)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_snapshots_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6858277, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshots_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_snapshots_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "default__get_snapshots_dml_sql", "macro_sql": "{% macro default__get_snapshots_dml_sql(snapshots) -%}\n\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(14)) }}\n        from values\n        {% for snapshot in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ snapshot.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ snapshot.database }}', {# database #}\n                '{{ snapshot.schema }}', {# schema #}\n                '{{ snapshot.name }}', {# name #}\n                '{{ tojson(snapshot.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ snapshot.package_name }}', {# package_name #}\n                '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ snapshot.checksum.checksum }}', {# checksum #}\n                '{{ snapshot.config.strategy }}', {# strategy #}\n                '{{ tojson(snapshot.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ snapshot.alias }}', {# alias #}\n                '{{ tojson(snapshot) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6920345, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_snapshots.sql", "original_file_path": "macros/upload_snapshots.sql", "name": "bigquery__get_snapshots_dml_sql", "macro_sql": "{% macro bigquery__get_snapshots_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n            {% for snapshot in snapshots -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ snapshot.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ snapshot.database }}', {# database #}\n                    '{{ snapshot.schema }}', {# schema #}\n                    '{{ snapshot.name }}', {# name #}\n                    {{ tojson(snapshot.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ snapshot.package_name }}', {# package_name #}\n                    '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ snapshot.checksum.checksum }}', {# checksum #}\n                    '{{ snapshot.config.strategy }}', {# strategy #}\n                    parse_json('''{{ tojson(snapshot.config.meta) }}'''), {# meta #}\n                    '{{ snapshot.alias }}', {# alias #}\n                    parse_json('{{ tojson(snapshot) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', wide_number_mode=>'round') {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.6948056, "supported_languages": null}, "macro.dbt_artifacts.upload_model_executions": {"unique_id": "macro.dbt_artifacts.upload_model_executions", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "upload_model_executions", "macro_sql": "{% macro upload_model_executions(results) -%}\n    {% set models = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"model\" %}\n            {% do models.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_model_executions_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_model_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.7063608, "supported_languages": null}, "macro.dbt_artifacts.default__get_model_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "default__get_model_executions_dml_sql", "macro_sql": "{% macro default__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake & BigQuery #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.7142704, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "bigquery__get_model_executions_dml_sql", "macro_sql": "{% macro bigquery__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        {% for model in models -%}\n            (\n            '{{ invocation_id }}', {# command_invocation_id #}\n            '{{ model.node.unique_id }}', {# node_id #}\n            '{{ run_started_at }}', {# run_started_at #}\n\n            {% set config_full_refresh = model.node.config.full_refresh %}\n            {% if config_full_refresh is none %}\n                {% set config_full_refresh = flags.FULL_REFRESH %}\n            {% endif %}\n            {{ config_full_refresh }}, {# was_full_refresh #}\n\n            '{{ model.thread_id }}', {# thread_id #}\n            '{{ model.status }}', {# status #}\n\n            {% if model.timing != [] %}\n                {% for stage in model.timing if stage.name == \"compile\" %}\n                    {% if loop.length == 0 %}\n                        null, {# compile_started_at #}\n                    {% else %}\n                        '{{ stage.started_at }}', {# compile_started_at #}\n                    {% endif %}\n                {% endfor %}\n\n                {% for stage in model.timing if stage.name == \"execute\" %}\n                    {% if loop.length == 0 %}\n                        null, {# query_completed_at #}\n                    {% else %}\n                        '{{ stage.completed_at }}', {# query_completed_at #}\n                    {% endif %}\n                {% endfor %}\n            {% else %}\n                null, {# compile_started_at #}\n                null, {# query_completed_at #}\n            {% endif %}\n\n            {{ model.execution_time }}, {# total_node_runtime #}\n            safe_cast('{{ model.adapter_response.rows_affected }}' as int64),\n            safe_cast('{{ model.adapter_response.bytes_processed }}' as int64),\n            '{{ model.node.config.materialized }}', {# materialization #}\n            '{{ model.node.schema }}', {# schema #}\n            '{{ model.node.name }}', {# name #}\n            '{{ model.node.alias }}', {# alias #}\n            '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n            parse_json('{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}') {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.7190895, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_model_executions.sql", "original_file_path": "macros/upload_model_executions.sql", "name": "snowflake__get_model_executions_dml_sql", "macro_sql": "{% macro snowflake__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.7273052, "supported_languages": null}, "macro.dbt_artifacts.upload_models": {"unique_id": "macro.dbt_artifacts.upload_models", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "upload_models", "macro_sql": "{% macro upload_models(models) -%}\n    {{ return(adapter.dispatch('get_models_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_models_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.733843, "supported_languages": null}, "macro.dbt_artifacts.default__get_models_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_models_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "default__get_models_dml_sql", "macro_sql": "{% macro default__get_models_dml_sql(models) -%}\n\n    {% if models != [] %}\n        {% set model_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(15)) }}\n        from values\n        {% for model in models -%}\n                {% do model.pop('raw_code', None) %}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ model.database }}', {# database #}\n                '{{ model.schema }}', {# schema #}\n                '{{ model.name }}', {# name #}\n                '{{ tojson(model.depends_on.nodes) | replace('\\\\', '\\\\\\\\') }}', {# depends_on_nodes #}\n                '{{ model.package_name }}', {# package_name #}\n                '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ model.checksum.checksum }}', {# checksum #}\n                '{{ model.config.materialized }}', {# materialization #}\n                '{{ tojson(model.tags) }}', {# tags #}\n                '{{ tojson(model.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ model.alias }}', {# alias #}\n                '{{ tojson(model) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.74059, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_models_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_models_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_models.sql", "original_file_path": "macros/upload_models.sql", "name": "bigquery__get_models_dml_sql", "macro_sql": "{% macro bigquery__get_models_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_values %}\n            {% for model in models -%}\n                {% do model.pop('raw_code', None) %}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ model.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ model.database }}', {# database #}\n                    '{{ model.schema }}', {# schema #}\n                    '{{ model.name }}', {# name #}\n                    {{ tojson(model.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ model.package_name }}', {# package_name #}\n                    '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ model.checksum.checksum }}', {# checksum #}\n                    '{{ model.config.materialized }}', {# materialization #}\n                    {{ tojson(model.tags) }}, {# tags #}\n                    parse_json('''{{ tojson(model.config.meta) }}'''), {# meta #}\n                    '{{ model.alias }}', {# alias #}\n                    parse_json('{{ tojson(model) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', wide_number_mode=>'round') {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.743659, "supported_languages": null}, "macro.dbt_artifacts.upload_test_executions": {"unique_id": "macro.dbt_artifacts.upload_test_executions", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "upload_test_executions", "macro_sql": "{% macro upload_test_executions(results) -%}\n    {% set tests = [] %}\n    {% for result in results  %}\n        {% if result.node.resource_type == \"test\" %}\n            {% do tests.append(result) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_test_executions_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_test_executions_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.7500532, "supported_languages": null}, "macro.dbt_artifacts.default__get_test_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_test_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "default__get_test_executions_dml_sql", "macro_sql": "{% macro default__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n                '{{ test.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(test.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.7571197, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_test_executions.sql", "original_file_path": "macros/upload_test_executions.sql", "name": "bigquery__get_test_executions_dml_sql", "macro_sql": "{% macro bigquery__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n                '{{ test.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                parse_json('{{ tojson(test.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}') {# adapter_response #}\n\n            )\n            {%- if not loop.last %},{%- endif %}\n\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.761577, "supported_languages": null}, "macro.dbt_artifacts.upload_invocations": {"unique_id": "macro.dbt_artifacts.upload_invocations", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "upload_invocations", "macro_sql": "{% macro upload_invocations() -%}\n\n    {# Need to remove keys with results that can't be handled properly #}\n    {# warn_error_options - returns a python object in 1.5 #}\n    {% if 'warn_error_options' in invocation_args_dict %}\n        {% if invocation_args_dict.warn_error_options is not string %}\n            {% if invocation_args_dict.warn_error_options.include %}\n                {% set include_options = invocation_args_dict.warn_error_options.include %}\n            {% else %}\n                {% set include_options = '' %}\n            {% endif %}\n            {% if invocation_args_dict.warn_error_options.exclude %}\n                {% set exclude_options = invocation_args_dict.warn_error_options.exclude %}\n            {% else %}\n                {% set exclude_options = '' %}\n            {% endif %}\n            {% set warn_error_options = {'include': include_options, 'exclude': exclude_options} %}\n            {%- do invocation_args_dict.update({'warn_error_options': warn_error_options}) %}\n        {% endif %}\n    {% endif %}\n\n    {{ return(adapter.dispatch('get_invocations_dml_sql', 'dbt_artifacts')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_invocations_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.772595, "supported_languages": null}, "macro.dbt_artifacts.default__get_invocations_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_invocations_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "default__get_invocations_dml_sql", "macro_sql": "{% macro default__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n    select\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }}, ''),\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(17)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(18)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(19)) }}\n    from values\n    (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        '{{ flags.FULL_REFRESH }}', {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: (env_var(env_variable, '') | replace(\"'\", \"''\"))}) %}\n            {% endfor %}\n            '{{ tojson(env_vars_dict) }}', {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, '') | replace(\"'\", \"''\"))}) %}\n            {% endfor %}\n            '{{ tojson(dbt_vars_dict) }}', {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        '{{ tojson(invocation_args_dict) | replace('\\\\', '\\\\\\\\') }}', {# invocation_args #}\n\n        {% set metadata_env = {} %}\n        {% for key, value in dbt_metadata_envs.items() %}\n            {% do metadata_env.update({key: (value | replace(\"'\", \"''\"))}) %}\n        {% endfor %}\n        '{{ tojson(metadata_env) | replace('\\\\', '\\\\\\\\') }}' {# dbt_custom_envs #}\n\n    )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.7819881, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_invocations_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_invocations_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_invocations.sql", "original_file_path": "macros/upload_invocations.sql", "name": "bigquery__get_invocations_dml_sql", "macro_sql": "{% macro bigquery__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n        (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        {{ flags.FULL_REFRESH }}, {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: (env_var(env_variable, ''))}) %}\n            {% endfor %}\n            parse_json('''{{ tojson(env_vars_dict) }}'''), {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, ''))}) %}\n            {% endfor %}\n            parse_json('''{{ tojson(dbt_vars_dict) }}'''), {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        {% if invocation_args_dict.vars %}\n            {# vars - different format for pre v1.5 (yaml vs list) #}\n            {% if invocation_args_dict.vars is string %}\n                {# BigQuery does not handle the yaml-string from \"--vars\" well, when passed to \"parse_json\". Workaround is to parse the string, and then \"tojson\" will properly format the dict as a json-object. #}\n                {% set parsed_inv_args_vars = fromyaml(invocation_args_dict.vars) %}\n                {% do invocation_args_dict.update({'vars': parsed_inv_args_vars}) %}\n            {% endif %}\n        {% endif %}\n\n        safe.parse_json('''{{ tojson(invocation_args_dict) }}'''), {# invocation_args #}\n\n        {% set metadata_env = {} %}\n        {% for key, value in dbt_metadata_envs.items() %}\n            {% do metadata_env.update({key: value}) %}\n        {% endfor %}\n        parse_json('''{{ tojson(metadata_env) | replace('\\\\', '\\\\\\\\') }}''') {# dbt_custom_envs #}\n\n        )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.787768, "supported_languages": null}, "macro.dbt_artifacts.upload_exposures": {"unique_id": "macro.dbt_artifacts.upload_exposures", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "upload_exposures", "macro_sql": "{% macro upload_exposures(graph) -%}\n    {% set exposures = [] %}\n    {% for node in graph.exposures.values() %}\n        {% do exposures.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_exposures_dml_sql', 'dbt_artifacts')(exposures)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_exposures_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.7945273, "supported_languages": null}, "macro.dbt_artifacts.default__get_exposures_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_exposures_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "default__get_exposures_dml_sql", "macro_sql": "{% macro default__get_exposures_dml_sql(exposures) -%}\n\n    {% if exposures != [] %}\n        {% set exposure_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(6)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(14)) }}\n        from values\n        {% for exposure in exposures -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                '{{ exposure.type }}', {# type #}\n                '{{ tojson(exposure.owner) }}', {# owner #}\n                '{{ exposure.maturity }}', {# maturity #}\n                '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ exposure.description | replace(\"'\",\"\\\\'\") }}', {# description #}\n                '{{ exposure.url }}', {# url #}\n                '{{ exposure.package_name }}', {# package_name #}\n                '{{ tojson(exposure.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ tojson(exposure.tags) }}', {# tags #}\n                '{{ tojson(exposure) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8007634, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_exposures_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_exposures_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_exposures.sql", "original_file_path": "macros/upload_exposures.sql", "name": "bigquery__get_exposures_dml_sql", "macro_sql": "{% macro bigquery__get_exposures_dml_sql(exposures) -%}\n    {% if exposures != [] %}\n        {% set exposure_values %}\n            {% for exposure in exposures -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                    '{{ exposure.type }}', {# type #}\n                    parse_json('{{ tojson(exposure.owner) | replace(\"'\",\"\\\\'\") }}'), {# owner #}\n                    '{{ exposure.maturity }}', {# maturity #}\n                    '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    \"\"\"{{ exposure.description | replace(\"'\",\"\\\\'\") }}\"\"\", {# description #}\n                    '{{ exposure.url }}', {# url #}\n                    '{{ exposure.package_name }}', {# package_name #}\n                    {{ tojson(exposure.depends_on.nodes) }}, {# depends_on_nodes #}\n                    {{ tojson(exposure.tags) }}, {# tags #}\n                    parse_json('{{ tojson(exposure) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', wide_number_mode=>'round') {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8039174, "supported_languages": null}, "macro.dbt_artifacts.column_identifier": {"unique_id": "macro.dbt_artifacts.column_identifier", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "column_identifier", "macro_sql": "{% macro column_identifier(column_index) -%}\n  {{ return(adapter.dispatch('column_identifier')(column_index)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.805022, "supported_languages": null}, "macro.dbt_artifacts.default__column_identifier": {"unique_id": "macro.dbt_artifacts.default__column_identifier", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "default__column_identifier", "macro_sql": "{% macro default__column_identifier(column_index) -%}\n    {{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8052826, "supported_languages": null}, "macro.dbt_artifacts.snowflake__column_identifier": {"unique_id": "macro.dbt_artifacts.snowflake__column_identifier", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "snowflake__column_identifier", "macro_sql": "{% macro snowflake__column_identifier(column_index) -%}\n    ${{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8055384, "supported_languages": null}, "macro.dbt_artifacts.spark__column_identifier": {"unique_id": "macro.dbt_artifacts.spark__column_identifier", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/column_identifier.sql", "original_file_path": "macros/column_identifier.sql", "name": "spark__column_identifier", "macro_sql": "{% macro spark__column_identifier(column_index) -%}\n    col{{ column_index }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8057923, "supported_languages": null}, "macro.dbt_artifacts.migrate_from_v0_to_v1": {"unique_id": "macro.dbt_artifacts.migrate_from_v0_to_v1", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/migrate_from_v0_to_v1.sql", "original_file_path": "macros/migrate_from_v0_to_v1.sql", "name": "migrate_from_v0_to_v1", "macro_sql": "{%- macro migrate_from_v0_to_v1(old_database, old_schema, new_database, new_schema) -%}\n\n    {% set migrate_model_executions %}\n        insert into {{new_database}}.{{new_schema}}.model_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            model_materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            model_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__model_executions\n    {% endset %}\n\n    {{ log(\"Migrating model_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_model_executions }}\n    {%- endcall -%}\n\n    {% set migrate_tests %}\n        insert into {{new_database}}.{{new_schema}}.tests (\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            tags,\n            test_path,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            [],\n            test_path,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__tests\n    {% endset %}\n\n    {{ log(\"Migrating tests\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_tests }}\n    {%- endcall -%}\n\n    {% set migrate_test_executions %}\n        insert into {{new_database}}.{{new_schema}}.test_executions (\n            command_invocation_id,\n            compile_started_at,\n            failures,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            null,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__test_executions\n    {% endset %}\n\n    {{ log(\"Migrating test_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_test_executions }}\n    {%- endcall -%}\n\n    {% set migrate_models %}\n        insert into {{new_database}}.{{new_schema}}.models (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            materialization,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            model_database,\n            depends_on_nodes,\n            model_materialization,\n            name,\n            node_id,\n            package_name,\n            model_path,\n            model_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__models\n    {% endset %}\n\n    {{ log(\"Migrating models\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_models }}\n    {%- endcall -%}\n\n    {% set migrate_seeds %}\n        insert into {{new_database}}.{{new_schema}}.seeds (\n            checksum,\n            command_invocation_id,\n            database,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            seed_database,\n            name,\n            node_id,\n            package_name,\n            seed_path,\n            seed_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__seeds\n    {% endset %}\n\n    {{ log(\"Migrating seeds\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seeds }}\n    {%- endcall -%}\n\n    {% set migrate_seed_executions %}\n        insert into {{new_database}}.{{new_schema}}.seed_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'seed',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            seed_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__seed_executions\n    {% endset %}\n\n    {{ log(\"Migrating seed_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seed_executions }}\n    {%- endcall -%}\n\n    {% set migrate_exposures %}\n        insert into {{new_database}}.{{new_schema}}.exposures (\n            command_invocation_id,\n            depends_on_nodes,\n            description,\n            maturity,\n            name,\n            node_id,\n            owner,\n            package_name,\n            path,\n            type,\n            url,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            array_agg(output_feeds), {#- Here we un-flatten the transformation originally done -#}\n            null,\n            any_value(maturity) as maturity,\n            name,\n            node_id,\n            null, {#- v0 is a string, v1 is a variant -#}\n            any_value(package_name) as package_name,\n            null,\n            any_value(type) as type,\n            null,\n            any_value(artifact_generated_at) as artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__exposures\n        group by command_invocation_id, node_id, name, artifact_generated_at\n    {% endset %}\n\n    {{ log(\"Migrating exposures\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_exposures }}\n    {%- endcall -%}\n\n    {% set migrate_snapshots %}\n        insert into {{new_database}}.{{new_schema}}.snapshots (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            strategy,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            snapshot_database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            snapshot_path,\n            snapshot_schema,\n            null,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__snapshots\n    {% endset %}\n\n    {{ log(\"Migrating snapshots\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshots }}\n    {%- endcall -%}\n\n    {% set migrate_snapshot_executions %}\n        insert into {{new_database}}.{{new_schema}}.snapshot_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'snapshot',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            snapshot_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__snapshot_executions\n    {% endset %}\n\n    {{ log(\"Migrating snapshot_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshot_executions }}\n    {%- endcall -%}\n\n    {% set migrate_sources %}\n        insert into {{new_database}}.{{new_schema}}.sources (\n            command_invocation_id,\n            database,\n            freshness,\n            identifier,\n            loaded_at_field,\n            loader,\n            name,\n            node_id,\n            schema,\n            source_name,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            node_database,\n            parse_json('[{\"error_after\":{\"count\":null,\"period\":null},\"filter\":null,\"warn_after\":{\"count\":null,\"period\":null}}]'),\n            name,\n            null,\n            source_loader,\n            name,\n            node_id,\n            source_schema,\n            source_name,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__sources\n    {% endset %}\n\n    {{ log(\"Migrating sources\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_sources }}\n    {%- endcall -%}\n\n    {{ log(\"Migration complete. You can now safely delete any data from before 1.0.0\", info=True) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8303049, "supported_languages": null}, "macro.dbt_artifacts.upload_seeds": {"unique_id": "macro.dbt_artifacts.upload_seeds", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "upload_seeds", "macro_sql": "{% macro upload_seeds(graph) -%}\n    {% set seeds = [] %}\n    {% for node in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"seed\") %}\n        {% do seeds.append(node) %}\n    {% endfor %}\n    {{ return(adapter.dispatch('get_seeds_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__get_seeds_dml_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.836065, "supported_languages": null}, "macro.dbt_artifacts.default__get_seeds_dml_sql": {"unique_id": "macro.dbt_artifacts.default__get_seeds_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "default__get_seeds_dml_sql", "macro_sql": "{% macro default__get_seeds_dml_sql(seeds) -%}\n\n    {% if seeds != [] %}\n        {% set seed_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(10)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for seed in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ seed.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ seed.database }}', {# database #}\n                '{{ seed.schema }}', {# schema #}\n                '{{ seed.name }}', {# name #}\n                '{{ seed.package_name }}', {# package_name #}\n                '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ seed.checksum.checksum }}', {# checksum #}\n                '{{ tojson(seed.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ seed.alias }}', {# alias #}\n                '{{ tojson(seed) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8413205, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seeds_dml_sql": {"unique_id": "macro.dbt_artifacts.bigquery__get_seeds_dml_sql", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "macros/upload_seeds.sql", "original_file_path": "macros/upload_seeds.sql", "name": "bigquery__get_seeds_dml_sql", "macro_sql": "{% macro bigquery__get_seeds_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_values %}\n            {% for seed in seeds -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ seed.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ seed.database }}', {# database #}\n                    '{{ seed.schema }}', {# schema #}\n                    '{{ seed.name }}', {# name #}\n                    '{{ seed.package_name }}', {# package_name #}\n                    '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ seed.checksum.checksum }}', {# checksum #}\n                    parse_json('''{{ tojson(seed.config.meta) }}'''), {# meta #}\n                    '{{ seed.alias }}', {# alias #}\n                    parse_json('{{ tojson(seed) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', wide_number_mode=>'round') {# all_results #}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8439362, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8712304, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8729625, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.873662, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.875479, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8773472, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8787196, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8799767, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.880778, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8812723, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8819022, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8824365, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8836918, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.884166, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8845837, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8857605, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8863974, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.887612, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8895106, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8900893, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.89072, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.89182, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8921204, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.894428, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8974578, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.898207, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.8988616, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9000845, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9052365, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9061763, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9078312, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.913617, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9142084, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9144702, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9178684, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9258654, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9263308, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.92754, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9284277, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.929207, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9299383, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9307296, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9316792, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9321494, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.932441, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9327219, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9330714, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9337704, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9371893, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9383807, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9395225, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9405293, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9407318, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9441378, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9449675, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9454546, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.945864, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.946346, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.946975, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.947491, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9482524, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9487264, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9491477, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9529734, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9532948, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9537358, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.954055, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9549396, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9554238, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9557004, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9562573, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9567518, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9573164, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9578001, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9587488, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.960418, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9609098, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9615467, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9621422, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.964983, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.966274, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9667914, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9673023, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9678795, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9749236, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9753666, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9759226, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9766521, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9772632, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9780807, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9785597, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9791152, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9795818, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9800096, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9806862, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9814162, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.982053, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9834168, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.983996, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9843667, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9848633, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9867213, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9871643, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.987676, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.988109, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9887745, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9899676, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9914021, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9917748, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9921858, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.993183, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9970508, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9974728, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9982843, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.9989212, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711330.999781, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.000358, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0018353, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0024948, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0044513, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0058947, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.00631, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0066876, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.006967, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0073938, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0075972, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.008018, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0084443, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0097644, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0108483, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0120487, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0128255, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.013614, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.01662, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0171328, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0175128, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0178816, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0182743, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0193138, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.019884, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0237086, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0298772, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0311038, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0315254, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0319858, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0326383, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0415359, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0455685, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0461948, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.048013, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0486782, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0503016, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0613873, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0644228, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.067441, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0695457, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0714753, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0752046, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0765827, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0782487, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0788498, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0806298, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.082894, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0834975, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.083977, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.084635, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0851085, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.085769, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0864458, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0871072, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0875835, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0879722, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.0886672, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1003156, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1065474, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1080623, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.108535, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.109616, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1106863, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1241384, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1321774, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1329, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1333265, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1335714, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.13395, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1342819, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.134797, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1369722, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.137463, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1381211, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1391962, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1405368, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1412315, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1490412, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1494882, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1500816, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1518314, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1522636, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.152702, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1561222, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1594386, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1608245, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1615918, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1628063, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1637774, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1688106, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1764894, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1862571, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1884844, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1890767, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1903114, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.190807, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1911728, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1915407, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1918457, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.19225, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.192555, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1938784, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1943839, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1973696, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1985874, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.1990218, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2000778, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.200438, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2019067, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2023556, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2029226, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2040775, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2045114, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2054536, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2057354, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2067032, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2071304, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.208021, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2082372, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2091734, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2094667, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2104778, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2110069, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2135198, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2139196, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2143533, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.214745, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2151582, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2155528, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2159665, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2164178, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2168334, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.217226, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2176414, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2180245, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_artifacts.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.218455, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2188294, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2205422, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2215903, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2226403, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2229924, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2239888, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.224835, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2258635, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2262447, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2273765, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2280438, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.228429, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2293034, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2295148, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2304544, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2307887, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.231804, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2321818, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2333944, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2340539, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2350082, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2352982, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2362885, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2366514, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.237784, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.238403, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2393448, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2397952, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2407355, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2410192, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2427044, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2436392, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2446933, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2458084, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2498512, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.252806, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2548711, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2554767, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2592354, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2606597, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2614143, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.262693, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.263349, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2645664, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2651532, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2666771, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.267354, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.268076, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2695687, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2701833, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2708964, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1685711331.2716017, "supported_languages": null}}, "docs": {"dbt_artifacts.command_invocation_id": {"unique_id": "dbt_artifacts.command_invocation_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "command_invocation_id", "block_contents": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation."}, "dbt_artifacts.node_id": {"unique_id": "dbt_artifacts.node_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "node_id", "block_contents": "Unique node identifier."}, "dbt_artifacts.name": {"unique_id": "dbt_artifacts.name", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "name", "block_contents": "Name of the node."}, "dbt_artifacts.schema": {"unique_id": "dbt_artifacts.schema", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "schema", "block_contents": "Configured schema for the node."}, "dbt_artifacts.package_name": {"unique_id": "dbt_artifacts.package_name", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "package_name", "block_contents": "Name of the dbt package which contains the node."}, "dbt_artifacts.total_node_runtime": {"unique_id": "dbt_artifacts.total_node_runtime", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "total_node_runtime", "block_contents": "Total time spent executing this node (seconds)."}, "dbt_artifacts.compile_started_at": {"unique_id": "dbt_artifacts.compile_started_at", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "compile_started_at", "block_contents": "Timestamp when the node started compiling."}, "dbt_artifacts.depends_on_nodes": {"unique_id": "dbt_artifacts.depends_on_nodes", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "depends_on_nodes", "block_contents": "Array of node identifiers that this node depends on in the execution graph."}, "dbt_artifacts.status": {"unique_id": "dbt_artifacts.status", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "status", "block_contents": "Represents the execution status of a node, can be success, failure, or error."}, "dbt_artifacts.query_completed_at": {"unique_id": "dbt_artifacts.query_completed_at", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "query_completed_at", "block_contents": "Timestamp when the node's SQL query completed."}, "dbt_artifacts.materialization": {"unique_id": "dbt_artifacts.materialization", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "materialization", "block_contents": "The materialization of the model."}, "dbt_artifacts.database": {"unique_id": "dbt_artifacts.database", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "database", "block_contents": "The configured database for the node."}, "dbt_artifacts.rows_affected": {"unique_id": "dbt_artifacts.rows_affected", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "rows_affected", "block_contents": "Number of rows affected by the model execution."}, "dbt_artifacts.bytes_processed": {"unique_id": "dbt_artifacts.bytes_processed", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "bytes_processed", "block_contents": "Number of bytes processed by the model execution."}, "dbt_artifacts.thread_id": {"unique_id": "dbt_artifacts.thread_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "thread_id", "block_contents": "Which thread executed this node? E.g. Thread-1"}, "dbt_artifacts.path": {"unique_id": "dbt_artifacts.path", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "path", "block_contents": "Path to the model on the local filesystem."}, "dbt_artifacts.was_full_refresh": {"unique_id": "dbt_artifacts.was_full_refresh", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "was_full_refresh", "block_contents": "Boolean flag indicating whether the nodes run was a full refresh or not."}, "dbt_artifacts.checksum": {"unique_id": "dbt_artifacts.checksum", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "checksum", "block_contents": "Checksum of the model."}, "dbt_artifacts.seed_execution_id": {"unique_id": "dbt_artifacts.seed_execution_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "seed_execution_id", "block_contents": "Execution ID of the seed node."}, "dbt_artifacts.test_execution_id": {"unique_id": "dbt_artifacts.test_execution_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "test_execution_id", "block_contents": "Execution ID of the test node."}, "dbt_artifacts.snapshot_execution_id": {"unique_id": "dbt_artifacts.snapshot_execution_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "snapshot_execution_id", "block_contents": "Execution ID of the snapshot node."}, "dbt_artifacts.model_execution_id": {"unique_id": "dbt_artifacts.model_execution_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "model_execution_id", "block_contents": "Execution ID of the model node."}, "dbt_artifacts.loader": {"unique_id": "dbt_artifacts.loader", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "loader", "block_contents": "Describes the tool that loads this source into your warehouse."}, "dbt_artifacts.freshness": {"unique_id": "dbt_artifacts.freshness", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "freshness", "block_contents": "The specified freshness of the source model."}, "dbt_artifacts.url": {"unique_id": "dbt_artifacts.url", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "url", "block_contents": "The URL of the BI tool where the data defined by the exposure can be viewed."}, "dbt_artifacts.identifier": {"unique_id": "dbt_artifacts.identifier", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "identifier", "block_contents": "Source identifier."}, "dbt_artifacts.source_name": {"unique_id": "dbt_artifacts.source_name", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "source_name", "block_contents": "Source name."}, "dbt_artifacts.test_path": {"unique_id": "dbt_artifacts.test_path", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "test_path", "block_contents": "Path to the yaml (SQL in case of a singular test) file describing the test."}, "dbt_artifacts.tags": {"unique_id": "dbt_artifacts.tags", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "tags", "block_contents": "Tags used in resource selection associated with the node."}, "dbt_artifacts.strategy": {"unique_id": "dbt_artifacts.strategy", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "strategy", "block_contents": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check."}, "dbt_artifacts.failures": {"unique_id": "dbt_artifacts.failures", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "failures", "block_contents": "Test failures. Value is 1 if the test failed, 0 if successful."}, "dbt_artifacts.loaded_at_field": {"unique_id": "dbt_artifacts.loaded_at_field", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "loaded_at_field", "block_contents": "A column name (or expression) that returns a timestamp indicating freshness."}, "dbt_artifacts.type": {"unique_id": "dbt_artifacts.type", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "type", "block_contents": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)"}, "dbt_artifacts.description": {"unique_id": "dbt_artifacts.description", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "description", "block_contents": "Node description."}, "dbt_artifacts.maturity": {"unique_id": "dbt_artifacts.maturity", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "maturity", "block_contents": "Exposure maturity; one of high, medium, low."}, "dbt_artifacts.owner": {"unique_id": "dbt_artifacts.owner", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "owner", "block_contents": "Owner of the exposure, usually an email address."}, "dbt_artifacts.source_execution_id": {"unique_id": "dbt_artifacts.source_execution_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "source_execution_id", "block_contents": "Execution ID of the source node."}, "dbt_artifacts.exposure_execution_id": {"unique_id": "dbt_artifacts.exposure_execution_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "exposure_execution_id", "block_contents": "Execution ID of the exposure node."}, "dbt_artifacts.dbt_version": {"unique_id": "dbt_artifacts.dbt_version", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_version", "block_contents": "Installed version of dbt that is currently running."}, "dbt_artifacts.project_name": {"unique_id": "dbt_artifacts.project_name", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "project_name", "block_contents": "Name for the root-level project which is being run by dbt."}, "dbt_artifacts.run_started_at": {"unique_id": "dbt_artifacts.run_started_at", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "run_started_at", "block_contents": "The start timestamp of the dbt execution which generated the record."}, "dbt_artifacts.dbt_command": {"unique_id": "dbt_artifacts.dbt_command", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_command", "block_contents": "dbt command of this run."}, "dbt_artifacts.full_refresh_flag": {"unique_id": "dbt_artifacts.full_refresh_flag", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "full_refresh_flag", "block_contents": "Boolean flag indicating whether the dbt run was in full refresh mode or not."}, "dbt_artifacts.target_profile_name": {"unique_id": "dbt_artifacts.target_profile_name", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_profile_name", "block_contents": "The name of the active profile."}, "dbt_artifacts.target_name": {"unique_id": "dbt_artifacts.target_name", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_name", "block_contents": "The name of the active target."}, "dbt_artifacts.target_schema": {"unique_id": "dbt_artifacts.target_schema", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_schema", "block_contents": "The name of the target dbt schema."}, "dbt_artifacts.target_threads": {"unique_id": "dbt_artifacts.target_threads", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "target_threads", "block_contents": "The number of threads in use by dbt."}, "dbt_artifacts.dbt_cloud_project_id": {"unique_id": "dbt_artifacts.dbt_cloud_project_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_project_id", "block_contents": "The ID of the dbt Cloud Project for this run."}, "dbt_artifacts.dbt_cloud_job_id": {"unique_id": "dbt_artifacts.dbt_cloud_job_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_job_id", "block_contents": "The ID of the dbt Cloud Job for this run."}, "dbt_artifacts.dbt_cloud_run_id": {"unique_id": "dbt_artifacts.dbt_cloud_run_id", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_id", "block_contents": "The ID of this particular run."}, "dbt_artifacts.dbt_cloud_run_reason_category": {"unique_id": "dbt_artifacts.dbt_cloud_run_reason_category", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_reason_category", "block_contents": "The \"category\" of the trigger for this run."}, "dbt_artifacts.dbt_cloud_run_reason": {"unique_id": "dbt_artifacts.dbt_cloud_run_reason", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_cloud_run_reason", "block_contents": "The specific trigger for this run."}, "dbt_artifacts.env_vars": {"unique_id": "dbt_artifacts.env_vars", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "env_vars", "block_contents": "Key-value pairs of environment variables to be capture."}, "dbt_artifacts.dbt_vars": {"unique_id": "dbt_artifacts.dbt_vars", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_vars", "block_contents": "Key-value pairs of project variables to be capture."}, "dbt_artifacts.last_full_refresh_run_completed_at": {"unique_id": "dbt_artifacts.last_full_refresh_run_completed_at", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last full (non-incremental) run."}, "dbt_artifacts.last_full_refresh_run_rows_affected": {"unique_id": "dbt_artifacts.last_full_refresh_run_rows_affected", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_rows_affected", "block_contents": "Number of rows affected by the node's last full (non-incremental) run."}, "dbt_artifacts.last_full_refresh_run_bytes_processed": {"unique_id": "dbt_artifacts.last_full_refresh_run_bytes_processed", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last full (non-incremental) run."}, "dbt_artifacts.last_full_refresh_run_total_runtime": {"unique_id": "dbt_artifacts.last_full_refresh_run_total_runtime", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_full_refresh_run_total_runtime", "block_contents": "Total time spent executing the node's last full (non-incremental) run (seconds)."}, "dbt_artifacts.last_run_completed_at": {"unique_id": "dbt_artifacts.last_run_completed_at", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last run."}, "dbt_artifacts.last_run_rows_affected": {"unique_id": "dbt_artifacts.last_run_rows_affected", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_rows_affected", "block_contents": "Number of rows affected by the node's last run."}, "dbt_artifacts.last_run_bytes_processed": {"unique_id": "dbt_artifacts.last_run_bytes_processed", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last run."}, "dbt_artifacts.last_run_total_runtime": {"unique_id": "dbt_artifacts.last_run_total_runtime", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "last_run_total_runtime", "block_contents": "Total time spent executing the node's last run (seconds)."}, "dbt_artifacts.meta": {"unique_id": "dbt_artifacts.meta", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "meta", "block_contents": "The meta field of the config associated with the node."}, "dbt_artifacts.invocation_args": {"unique_id": "dbt_artifacts.invocation_args", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "invocation_args", "block_contents": "Key-value pairs of args passed to invocation."}, "dbt_artifacts.dbt_custom_envs": {"unique_id": "dbt_artifacts.dbt_custom_envs", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "dbt_custom_envs", "block_contents": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_"}, "dbt_artifacts.alias": {"unique_id": "dbt_artifacts.alias", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "alias", "block_contents": "Alias of the node."}, "dbt_artifacts.message": {"unique_id": "dbt_artifacts.message", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "message", "block_contents": "Result report, based on information returned from the database"}, "dbt_artifacts.adapter_response": {"unique_id": "dbt_artifacts.adapter_response", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "adapter_response", "block_contents": "Response provided by the adapter as JSON."}, "dbt_artifacts.all_results": {"unique_id": "dbt_artifacts.all_results", "package_name": "dbt_artifacts", "root_path": "/home/runner/work/dbt_artifacts/dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "name": "all_results", "block_contents": "All results as a JSON blob"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/runner/.local/lib/python3.10/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_artifacts.dim_dbt__sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.dim_dbt__snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.fct_dbt__snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.fct_dbt__seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.fct_dbt__test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.dim_dbt__tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.dim_dbt__seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.dim_dbt__exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.fct_dbt__invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.dim_dbt__models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.fct_dbt__model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.dim_dbt__current_models": ["model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.invocations"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.snapshots"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.exposures"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.tests"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.model_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.seed_executions"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.snapshot_executions"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.seeds"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.test_executions"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.sources"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.models"], "model.dbt_artifacts.model_executions": [], "model.dbt_artifacts.sources": [], "model.dbt_artifacts.exposures": [], "model.dbt_artifacts.snapshot_executions": [], "model.dbt_artifacts.seeds": [], "model.dbt_artifacts.test_executions": [], "model.dbt_artifacts.models": [], "model.dbt_artifacts.invocations": [], "model.dbt_artifacts.snapshots": [], "model.dbt_artifacts.seed_executions": [], "model.dbt_artifacts.tests": []}, "child_map": {"model.dbt_artifacts.dim_dbt__sources": [], "model.dbt_artifacts.dim_dbt__snapshots": [], "model.dbt_artifacts.fct_dbt__snapshot_executions": [], "model.dbt_artifacts.fct_dbt__seed_executions": [], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.dim_dbt__tests": [], "model.dbt_artifacts.dim_dbt__seeds": [], "model.dbt_artifacts.dim_dbt__exposures": [], "model.dbt_artifacts.fct_dbt__invocations": [], "model.dbt_artifacts.dim_dbt__models": [], "model.dbt_artifacts.fct_dbt__model_executions": [], "model.dbt_artifacts.dim_dbt__current_models": [], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.fct_dbt__invocations"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.dim_dbt__snapshots"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.dim_dbt__exposures"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.dim_dbt__tests"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.fct_dbt__model_executions"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.fct_dbt__seed_executions"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.fct_dbt__snapshot_executions"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.dim_dbt__seeds"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.fct_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.dim_dbt__sources"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.dim_dbt__models"], "model.dbt_artifacts.model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.tests": ["model.dbt_artifacts.stg_dbt__tests"]}}
{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.3", "generated_at": "2023-09-28T13:54:16.436375Z", "invocation_id": "570b8537-7557-478b-b853-3d05c1a32a9c", "env": {}, "project_name": "dbt_artifacts", "project_id": "80a035c5caa7bfb9378465c4c70ed133", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.dbt_artifacts.dim_dbt__current_models": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "dim_dbt__current_models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__current_models.sql", "original_file_path": "models/dim_dbt__current_models.sql", "unique_id": "model.dbt_artifacts.dim_dbt__current_models", "fqn": ["dbt_artifacts", "dim_dbt__current_models"], "alias": "dim_dbt__current_models", "checksum": {"name": "sha256", "checksum": "c05bd9789102586e652f96737cced00ed202366d17e9d78bb89535ee5cbadf82"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about models' most recent successful runs", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "description": "Number of rows affected by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_full_refresh_run_bytes_processed": {"name": "last_full_refresh_run_bytes_processed", "description": "Number of bytes processed by the node's last full (non-incremental) run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "description": "Total time spent executing the node's last full (non-incremental) run (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_run_completed_at": {"name": "last_run_completed_at", "description": "Timestamp when the node's SQL query completed on the last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_run_rows_affected": {"name": "last_run_rows_affected", "description": "Number of rows affected by the node's last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_run_bytes_processed": {"name": "last_run_bytes_processed", "description": "Number of bytes processed by the node's last run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_run_total_runtime": {"name": "last_run_total_runtime", "description": "Total time spent executing the node's last run (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__current_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4623086, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.dim_dbt__current_models", "raw_code": "with base as (\n    select *\n    from {{ ref('stg_dbt__models') }}\n),\n\nmodel_executions as (\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        {% if target.type == 'bigquery' %}\n        , model_executions.bytes_processed\n        {% endif %}\n        /* Row number by refresh and node ID */\n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n        /* Row number by node ID */\n        , row_number() over (\n            partition by latest_models.node_id\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx_id_only\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(case when was_full_refresh then bytes_processed end) as last_full_refresh_run_bytes_processed\n        {% endif %}\n        , max(case when run_idx_id_only = 1 then query_completed_at end) as last_run_completed_at\n        , max(case when run_idx_id_only = 1 then total_node_runtime end) as last_run_total_runtime\n        , max(case when run_idx_id_only = 1 then rows_affected end) as last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(case when run_idx_id_only = 1 then bytes_processed end) as last_run_bytes_processed\n        {% endif %}\n        , max(case when not was_full_refresh then query_completed_at end) as last_incremental_run_completed_at\n        , max(case when not was_full_refresh then total_node_runtime end) as last_incremental_run_total_runtime\n        , max(case when not was_full_refresh then rows_affected end) as last_incremental_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , max(case when not was_full_refresh then bytes_processed end) as last_incremental_run_bytes_processed\n        {% endif %}\n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_full_refresh_run_bytes_processed\n        {% endif %}\n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_run_bytes_processed\n        {% endif %}\n        , latest_model_stats.last_incremental_run_completed_at\n        , latest_model_stats.last_incremental_run_total_runtime\n        , latest_model_stats.last_incremental_run_rows_affected\n        {% if target.type == 'bigquery' %}\n        , latest_model_stats.last_incremental_run_bytes_processed\n        {% endif %}\n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_dbt__models", "package": null, "version": null}, {"name": "stg_dbt__model_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__model_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__current_models.sql", "compiled": true, "compiled_code": "with base as (\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__models\n),\n\nmodel_executions as (\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__model_executions\n),\n\nlatest_models as (\n    /* Retrieves the models present in the most recent run */\n    select *\n    from base\n    where run_started_at = (select max(run_started_at) from base)\n),\n\nlatest_models_runs as (\n    /* Retreives all successful run information for the models present in the most\n    recent run and ranks them based on query completion time */\n    select\n        model_executions.node_id\n        , model_executions.was_full_refresh\n        , model_executions.query_completed_at\n        , model_executions.total_node_runtime\n        , model_executions.rows_affected\n        \n        /* Row number by refresh and node ID */\n        , row_number() over (\n            partition by latest_models.node_id, model_executions.was_full_refresh\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx\n        /* Row number by node ID */\n        , row_number() over (\n            partition by latest_models.node_id\n            order by model_executions.query_completed_at desc /* most recent ranked first */\n        ) as run_idx_id_only\n    from model_executions\n    inner join latest_models on model_executions.node_id = latest_models.node_id\n    where model_executions.status = 'success'\n),\n\nlatest_model_stats as (\n    select\n        node_id\n        , max(case when was_full_refresh then query_completed_at end) as last_full_refresh_run_completed_at\n        , max(case when was_full_refresh then total_node_runtime end) as last_full_refresh_run_total_runtime\n        , max(case when was_full_refresh then rows_affected end) as last_full_refresh_run_rows_affected\n        \n        , max(case when run_idx_id_only = 1 then query_completed_at end) as last_run_completed_at\n        , max(case when run_idx_id_only = 1 then total_node_runtime end) as last_run_total_runtime\n        , max(case when run_idx_id_only = 1 then rows_affected end) as last_run_rows_affected\n        \n        , max(case when not was_full_refresh then query_completed_at end) as last_incremental_run_completed_at\n        , max(case when not was_full_refresh then total_node_runtime end) as last_incremental_run_total_runtime\n        , max(case when not was_full_refresh then rows_affected end) as last_incremental_run_rows_affected\n        \n    from latest_models_runs\n    where run_idx = 1\n    group by 1\n),\n\nfinal as (\n    select\n        latest_models.*\n        , latest_model_stats.last_full_refresh_run_completed_at\n        , latest_model_stats.last_full_refresh_run_total_runtime\n        , latest_model_stats.last_full_refresh_run_rows_affected\n        \n        , latest_model_stats.last_run_completed_at\n        , latest_model_stats.last_run_total_runtime\n        , latest_model_stats.last_run_rows_affected\n        \n        , latest_model_stats.last_incremental_run_completed_at\n        , latest_model_stats.last_incremental_run_total_runtime\n        , latest_model_stats.last_incremental_run_rows_affected\n        \n    from latest_models\n    left join latest_model_stats\n        on latest_models.node_id = latest_model_stats.node_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.dim_dbt__sources": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "dim_dbt__sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__sources.sql", "original_file_path": "models/dim_dbt__sources.sql", "unique_id": "model.dbt_artifacts.dim_dbt__sources", "fqn": ["dbt_artifacts", "dim_dbt__sources"], "alias": "dim_dbt__sources", "checksum": {"name": "sha256", "checksum": "7c05773e6974d042eba9c13f7cc7d4d922c6c255855e6a3b4043fa7bf8e2bac0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about sources.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.466339, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.dim_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__sources') }}\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "language": "sql", "refs": [{"name": "stg_dbt__sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__sources"]}, "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__sources.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__sources\n\n),\n\nsources as (\n\n    select\n        source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from sources", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.dim_dbt__tests": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "dim_dbt__tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__tests.sql", "original_file_path": "models/dim_dbt__tests.sql", "unique_id": "model.dbt_artifacts.dim_dbt__tests", "fqn": ["dbt_artifacts", "dim_dbt__tests"], "alias": "dim_dbt__tests", "checksum": {"name": "sha256", "checksum": "aa301ae84a25357e3eb01bb41238f7d5126cbc576348fb769246a8b5737c0065"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about tests.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4252112, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.dim_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__tests') }}\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "language": "sql", "refs": [{"name": "stg_dbt__tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__tests"]}, "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__tests.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__tests\n\n),\n\ntests as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from tests", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.fct_dbt__invocations": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "fct_dbt__invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__invocations.sql", "original_file_path": "models/fct_dbt__invocations.sql", "unique_id": "model.dbt_artifacts.fct_dbt__invocations", "fqn": ["dbt_artifacts", "fct_dbt__invocations"], "alias": "fct_dbt__invocations", "checksum": {"name": "sha256", "checksum": "c58651a8fb885f0b0bdcea8a7000c8413b8d611f7ed0bf82fcd49e5000619c32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about invocations.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__invocations.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4350743, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.fct_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__invocations') }}\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from invocations", "language": "sql", "refs": [{"name": "stg_dbt__invocations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__invocations"]}, "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__invocations.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__invocations\n\n),\n\ninvocations as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from invocations", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.fct_dbt__model_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "fct_dbt__model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__model_executions.sql", "original_file_path": "models/fct_dbt__model_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "fqn": ["dbt_artifacts", "fct_dbt__model_executions"], "alias": "fct_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "95cfbd8c023b5c9e920c6bb694ffa5c7f59596b49b9f8a811c7d2a6fdb7cfabe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about model executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bytes_affected": {"name": "bytes_affected", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.453353, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.fct_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from model_executions", "language": "sql", "refs": [{"name": "stg_dbt__model_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__model_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__model_executions.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__model_executions\n\n),\n\nmodel_executions as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        \n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from model_executions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.dim_dbt__models": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "dim_dbt__models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__models.sql", "original_file_path": "models/dim_dbt__models.sql", "unique_id": "model.dbt_artifacts.dim_dbt__models", "fqn": ["dbt_artifacts", "dim_dbt__models"], "alias": "dim_dbt__models", "checksum": {"name": "sha256", "checksum": "d983205b0257086d4182d80e8f99313234b70dd0f54c63ae4aaed1e3326a142b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about models.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4230075, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.dim_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__models') }}\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from models", "language": "sql", "refs": [{"name": "stg_dbt__models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models"]}, "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__models.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__models\n\n),\n\nmodels as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from models", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.dim_dbt__exposures": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "dim_dbt__exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__exposures.sql", "original_file_path": "models/dim_dbt__exposures.sql", "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "fqn": ["dbt_artifacts", "dim_dbt__exposures"], "alias": "dim_dbt__exposures", "checksum": {"name": "sha256", "checksum": "4e6b5285050f6cdd809b3a1c0f072e75114e595aa9f53a6c9b9cfba4adad4487"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about exposures.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__exposures.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4415095, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.dim_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__exposures') }}\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from exposures", "language": "sql", "refs": [{"name": "stg_dbt__exposures", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__exposures"]}, "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__exposures.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__exposures\n\n),\n\nexposures as (\n\n    select\n        exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from exposures", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.fct_dbt__seed_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "fct_dbt__seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__seed_executions.sql", "original_file_path": "models/fct_dbt__seed_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__seed_executions", "fqn": ["dbt_artifacts", "fct_dbt__seed_executions"], "alias": "fct_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "6ee5abff9a8147d1e7e55895dc4e0fda41867069ef06cb00c0cfbec7f1551590"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about seed executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4474928, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.fct_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seed_executions') }}\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from seed_executions", "language": "sql", "refs": [{"name": "stg_dbt__seed_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seed_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__seed_executions.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__seed_executions\n\n),\n\nseed_executions as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from seed_executions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.dim_dbt__snapshots": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "dim_dbt__snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__snapshots.sql", "original_file_path": "models/dim_dbt__snapshots.sql", "unique_id": "model.dbt_artifacts.dim_dbt__snapshots", "fqn": ["dbt_artifacts", "dim_dbt__snapshots"], "alias": "dim_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "8a2ef7f0b0892c9197611911c1c0700e86a301e27825da25a7f66cfd2bab409c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about snapshots.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4499865, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.dim_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshots') }}\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from snapshots", "language": "sql", "refs": [{"name": "stg_dbt__snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshots"]}, "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__snapshots.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__snapshots\n\n),\n\nsnapshots as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from snapshots", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.fct_dbt__snapshot_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "fct_dbt__snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__snapshot_executions.sql", "original_file_path": "models/fct_dbt__snapshot_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__snapshot_executions", "fqn": ["dbt_artifacts", "fct_dbt__snapshot_executions"], "alias": "fct_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "fae9bb5c2160bdb4c937f9d5971b896e47f78a08cd423722efd4a1f03854c012"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about snapshot executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4569843, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.fct_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__snapshot_executions') }}\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from snapshot_executions", "language": "sql", "refs": [{"name": "stg_dbt__snapshot_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__snapshot_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__snapshot_executions.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__snapshot_executions\n\n),\n\nsnapshot_executions as (\n\n    select\n        snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema,\n        name,\n        alias,\n        message\n    from base\n\n)\n\nselect * from snapshot_executions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.dim_dbt__seeds": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "dim_dbt__seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "dim_dbt__seeds.sql", "original_file_path": "models/dim_dbt__seeds.sql", "unique_id": "model.dbt_artifacts.dim_dbt__seeds", "fqn": ["dbt_artifacts", "dim_dbt__seeds"], "alias": "dim_dbt__seeds", "checksum": {"name": "sha256", "checksum": "350b4d88c96d239c69da34d8b875d2002a2d74a8330a1f39b73fdb71850082d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Dimension model that contains data about seeds.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/dim_dbt__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4513574, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.dim_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__seeds') }}\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from seeds", "language": "sql", "refs": [{"name": "stg_dbt__seeds", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__seeds"]}, "compiled_path": "target/compiled/dbt_artifacts/models/dim_dbt__seeds.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__seeds\n\n),\n\nseeds as (\n\n    select\n        seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from seeds", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.fct_dbt__test_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "fct_dbt__test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "fct_dbt__test_executions.sql", "original_file_path": "models/fct_dbt__test_executions.sql", "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "fqn": ["dbt_artifacts", "fct_dbt__test_executions"], "alias": "fct_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "38ab767416a2b1bfdc5d471dc4c7bb9d2a44b7482c6d96f8fe55d4d0f1f3aff3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Fact model that contains data about test executions.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/fct_dbt__test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.455362, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.fct_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__test_executions') }}\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from test_executions", "language": "sql", "refs": [{"name": "stg_dbt__test_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__test_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/fct_dbt__test_executions.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__test_executions\n\n),\n\ntest_executions as (\n\n    select\n        test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from test_executions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.sources": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/sources.sql", "original_file_path": "models/sources/sources.sql", "unique_id": "model.dbt_artifacts.sources", "fqn": ["dbt_artifacts", "sources", "sources"], "alias": "sources", "checksum": {"name": "sha256", "checksum": "cdb2b6f673a0c33ee6f4b4df2061af8e3f377b2270c807abc6e2652b6eef91d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.474269, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.sources", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as source_name,\n    cast(null as {{ type_string() }}) as loader,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as identifier,\n    cast(null as {{ type_string() }}) as loaded_at_field,\n    {% if target.type == 'snowflake' %}\n        cast(null as {{ type_array() }}) as freshness,\n    {% else %}\n        cast(null as {{ type_json() }}) as freshness,\n    {% endif %}\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/sources.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as source_name,\n    cast(null as TEXT) as loader,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as identifier,\n    cast(null as TEXT) as loaded_at_field,\n    \n        cast(null as \n   array\n) as freshness,\n    \n    cast(null as \n   object\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.tests": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/tests.sql", "original_file_path": "models/sources/tests.sql", "unique_id": "model.dbt_artifacts.tests", "fqn": ["dbt_artifacts", "sources", "tests"], "alias": "tests", "checksum": {"name": "sha256", "checksum": "4c01738a844f61998ee400d5488ffc6ec4f26f5cab407c1e381d68b372b13a85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.477163, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.tests", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as test_path,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/tests.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as name,\n    cast(null as \n   array\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as test_path,\n    cast(null as \n   array\n) as tags,\n    cast(null as \n   object\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.seeds": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/seeds.sql", "original_file_path": "models/sources/seeds.sql", "unique_id": "model.dbt_artifacts.seeds", "fqn": ["dbt_artifacts", "sources", "seeds"], "alias": "seeds", "checksum": {"name": "sha256", "checksum": "55e82a7ace6b25fd550da716c0414cbc730fc733bdab74d12cc688ee52f44469"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for metadata about seed executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.4709122, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.seeds", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/seeds.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as \n   object\n) as meta,\n    cast(null as TEXT) as alias,\n    cast(null as \n   object\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.snapshot_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/snapshot_executions.sql", "original_file_path": "models/sources/snapshot_executions.sql", "unique_id": "model.dbt_artifacts.snapshot_executions", "fqn": ["dbt_artifacts", "sources", "snapshot_executions"], "alias": "snapshot_executions", "checksum": {"name": "sha256", "checksum": "c1f20c827ffb1ef7cddf70afef424ccc92ad257d26f35c6e133a3cc42d66562b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.4803069, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.snapshot_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/snapshot_executions.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as message,\n    cast(null as \n   object\n) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.models": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/models.sql", "original_file_path": "models/sources/models.sql", "unique_id": "model.dbt_artifacts.models", "fqn": ["dbt_artifacts", "sources", "models"], "alias": "models", "checksum": {"name": "sha256", "checksum": "5dc9021a99345640990cec2146093b91bb211ee5b97d165d468768df1d437daf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.46799, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.models", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/models.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as \n   array\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as TEXT) as materialization,\n    cast(null as \n   array\n) as tags,\n    cast(null as \n   object\n) as meta,\n    cast(null as TEXT) as alias,\n    cast(null as \n   object\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.exposures": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/exposures.sql", "original_file_path": "models/sources/exposures.sql", "unique_id": "model.dbt_artifacts.exposures", "fqn": ["dbt_artifacts", "sources", "exposures"], "alias": "exposures", "checksum": {"name": "sha256", "checksum": "6e722dd3b66bc19547705c0d0e95151b9676c07c9c7af257128258a28b76dc89"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/exposures.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.4718466, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.exposures", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as type,\n    cast(null as {{ type_json() }}) as owner,\n    cast(null as {{ type_string() }}) as maturity,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as description,\n    cast(null as {{ type_string() }}) as url,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_array() }}) as tags,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_json", "macro.dbt_artifacts.type_array"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/exposures.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as type,\n    cast(null as \n   object\n) as owner,\n    cast(null as TEXT) as maturity,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as description,\n    cast(null as TEXT) as url,\n    cast(null as TEXT) as package_name,\n    cast(null as \n   array\n) as depends_on_nodes,\n    cast(null as \n   array\n) as tags,\n    cast(null as \n   object\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.model_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/model_executions.sql", "original_file_path": "models/sources/model_executions.sql", "unique_id": "model.dbt_artifacts.model_executions", "fqn": ["dbt_artifacts", "sources", "model_executions"], "alias": "model_executions", "checksum": {"name": "sha256", "checksum": "00aae46c1cbea3c8af251b4a237357156d86e22cebcbbe4b939fb7319036ebba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.4786935, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.model_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    {% if target.type == 'bigquery' %}\n        cast(null as {{ type_int() }}) as bytes_processed,\n    {% endif %}\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/model_executions.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    \n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as message,\n    cast(null as \n   object\n) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.seed_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/seed_executions.sql", "original_file_path": "models/sources/seed_executions.sql", "unique_id": "model.dbt_artifacts.seed_executions", "fqn": ["dbt_artifacts", "sources", "seed_executions"], "alias": "seed_executions", "checksum": {"name": "sha256", "checksum": "c1f20c827ffb1ef7cddf70afef424ccc92ad257d26f35c6e133a3cc42d66562b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.4733815, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.seed_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_string() }}) as materialization,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/seed_executions.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as TEXT) as materialization,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as TEXT) as alias,\n    cast(null as TEXT) as message,\n    cast(null as \n   object\n) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.snapshots": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/snapshots.sql", "original_file_path": "models/sources/snapshots.sql", "unique_id": "model.dbt_artifacts.snapshots", "fqn": ["dbt_artifacts", "sources", "snapshots"], "alias": "snapshots", "checksum": {"name": "sha256", "checksum": "7105778c0a8dbf7396ed63f19ec8c56bfd6133605ad351bb924ecc68055eb92a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for metadata about seed executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_results": {"name": "all_results", "description": "All results as a JSON blob", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.4812758, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.snapshots", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as database,\n    cast(null as {{ type_string() }}) as schema,\n    cast(null as {{ type_string() }}) as name,\n    cast(null as {{ type_array() }}) as depends_on_nodes,\n    cast(null as {{ type_string() }}) as package_name,\n    cast(null as {{ type_string() }}) as path,\n    cast(null as {{ type_string() }}) as checksum,\n    cast(null as {{ type_string() }}) as strategy,\n    cast(null as {{ type_json() }}) as meta,\n    cast(null as {{ type_string() }}) as alias,\n    cast(null as {{ type_json() }}) as all_results\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_array", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/snapshots.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as database,\n    cast(null as TEXT) as schema,\n    cast(null as TEXT) as name,\n    cast(null as \n   array\n) as depends_on_nodes,\n    cast(null as TEXT) as package_name,\n    cast(null as TEXT) as path,\n    cast(null as TEXT) as checksum,\n    cast(null as TEXT) as strategy,\n    cast(null as \n   object\n) as meta,\n    cast(null as TEXT) as alias,\n    cast(null as \n   object\n) as all_results\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.test_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/test_executions.sql", "original_file_path": "models/sources/test_executions.sql", "unique_id": "model.dbt_artifacts.test_executions", "fqn": ["dbt_artifacts", "sources", "test_executions"], "alias": "test_executions", "checksum": {"name": "sha256", "checksum": "99cdc23c924ffccb41d4f04f1c01d77b68882db3d20103ade59566e54f795e5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.4700098, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.test_executions", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as node_id,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_boolean() }}) as was_full_refresh,\n    cast(null as {{ type_string() }}) as thread_id,\n    cast(null as {{ type_string() }}) as status,\n    cast(null as {{ type_timestamp() }}) as compile_started_at,\n    cast(null as {{ type_timestamp() }}) as query_completed_at,\n    cast(null as {{ type_float() }}) as total_node_runtime,\n    cast(null as {{ type_int() }}) as rows_affected,\n    cast(null as {{ type_int() }}) as failures,\n    cast(null as {{ type_string() }}) as message,\n    cast(null as {{ type_json() }}) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/test_executions.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as node_id,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as BOOLEAN) as was_full_refresh,\n    cast(null as TEXT) as thread_id,\n    cast(null as TEXT) as status,\n    cast(null as TIMESTAMP) as compile_started_at,\n    cast(null as TIMESTAMP) as query_completed_at,\n    cast(null as FLOAT) as total_node_runtime,\n    cast(null as INT) as rows_affected,\n    cast(null as INT) as failures,\n    cast(null as TEXT) as message,\n    cast(null as \n   object\n) as adapter_response\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.invocations": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "sources/invocations.sql", "original_file_path": "models/sources/invocations.sql", "unique_id": "model.dbt_artifacts.invocations", "fqn": ["dbt_artifacts", "sources", "invocations"], "alias": "invocations", "checksum": {"name": "sha256", "checksum": "6a4815b5120da5634e36f6e798de58df84e90a99217f492f326fccbc04d1ffba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"columns": true}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Base model for data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/sources/invocations.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "on_schema_change": "append_new_columns", "full_refresh": false, "persist_docs": {"columns": "{{ target.name != \"databricks\" }}"}}, "created_at": 1695909258.4762557, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.invocations", "raw_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as {{ type_string() }}) as command_invocation_id,\n    cast(null as {{ type_string() }}) as dbt_version,\n    cast(null as {{ type_string() }}) as project_name,\n    cast(null as {{ type_timestamp() }}) as run_started_at,\n    cast(null as {{ type_string() }}) as dbt_command,\n    cast(null as {{ type_boolean() }}) as full_refresh_flag,\n    cast(null as {{ type_string() }}) as target_profile_name,\n    cast(null as {{ type_string() }}) as target_name,\n    cast(null as {{ type_string() }}) as target_schema,\n    cast(null as {{ type_int() }}) as target_threads,\n    cast(null as {{ type_string() }}) as dbt_cloud_project_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_job_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_id,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason_category,\n    cast(null as {{ type_string() }}) as dbt_cloud_run_reason,\n    cast(null as {{ type_json() }}) as env_vars,\n    cast(null as {{ type_json() }}) as dbt_vars,\n    cast(null as {{ type_json() }}) as invocation_args,\n    cast(null as {{ type_json() }}) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_timestamp", "macro.dbt_artifacts.type_boolean", "macro.dbt.type_int", "macro.dbt_artifacts.type_json"], "nodes": []}, "compiled_path": "target/compiled/dbt_artifacts/models/sources/invocations.sql", "compiled": true, "compiled_code": "/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect\n    cast(null as TEXT) as command_invocation_id,\n    cast(null as TEXT) as dbt_version,\n    cast(null as TEXT) as project_name,\n    cast(null as TIMESTAMP) as run_started_at,\n    cast(null as TEXT) as dbt_command,\n    cast(null as BOOLEAN) as full_refresh_flag,\n    cast(null as TEXT) as target_profile_name,\n    cast(null as TEXT) as target_name,\n    cast(null as TEXT) as target_schema,\n    cast(null as INT) as target_threads,\n    cast(null as TEXT) as dbt_cloud_project_id,\n    cast(null as TEXT) as dbt_cloud_job_id,\n    cast(null as TEXT) as dbt_cloud_run_id,\n    cast(null as TEXT) as dbt_cloud_run_reason_category,\n    cast(null as TEXT) as dbt_cloud_run_reason,\n    cast(null as \n   object\n) as env_vars,\n    cast(null as \n   object\n) as dbt_vars,\n    cast(null as \n   object\n) as invocation_args,\n    cast(null as \n   object\n) as dbt_custom_envs\nfrom dummy_cte\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__seed_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__seed_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__seed_executions.sql", "original_file_path": "models/staging/stg_dbt__seed_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__seed_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seed_executions"], "alias": "stg_dbt__seed_executions", "checksum": {"name": "sha256", "checksum": "a1d73976c499d79936a129f1fa7a536f66e97812829b27bbf2b84fef747b3ac0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about seed executions. One row per seed execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seed_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4986565, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__seed_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seed_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "seed_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.seed_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__seed_executions.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.seed_executions\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__invocations": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__invocations", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__invocations.sql", "original_file_path": "models/staging/stg_dbt__invocations.sql", "unique_id": "model.dbt_artifacts.stg_dbt__invocations", "fqn": ["dbt_artifacts", "staging", "stg_dbt__invocations"], "alias": "stg_dbt__invocations", "checksum": {"name": "sha256", "checksum": "3c6ec7ff1be73763b9215b9cdb5713dbef4e09473f9179b8aae86f44591db65d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about the invocations of dbt. One row per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Installed version of dbt that is currently running.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Name for the root-level project which is being run by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_command": {"name": "dbt_command", "description": "dbt command of this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "full_refresh_flag": {"name": "full_refresh_flag", "description": "Boolean flag indicating whether the dbt run was in full refresh mode or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "The name of the active profile.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "The name of the active target.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "The name of the target dbt schema.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_threads": {"name": "target_threads", "description": "The number of threads in use by dbt.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "description": "The ID of the dbt Cloud Project for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "description": "The ID of the dbt Cloud Job for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "description": "The ID of this particular run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "description": "The \"category\" of the trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "description": "The specific trigger for this run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "env_vars": {"name": "env_vars", "description": "Key-value pairs of environment variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_vars": {"name": "dbt_vars", "description": "Key-value pairs of project variables to be capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invocation_args": {"name": "invocation_args", "description": "Key-value pairs of args passed to invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dbt_custom_envs": {"name": "dbt_custom_envs", "description": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__invocations.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4908442, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__invocations", "raw_code": "with base as (\n\n    select *\n    from {{ ref('invocations') }}\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "invocations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.invocations"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__invocations.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.invocations\n\n),\n\nenhanced as (\n\n    select\n        command_invocation_id,\n        dbt_version,\n        project_name,\n        run_started_at,\n        dbt_command,\n        full_refresh_flag,\n        target_profile_name,\n        target_name,\n        target_schema,\n        target_threads,\n        dbt_cloud_project_id,\n        dbt_cloud_job_id,\n        dbt_cloud_run_id,\n        dbt_cloud_run_reason_category,\n        dbt_cloud_run_reason,\n        env_vars,\n        dbt_vars,\n        invocation_args,\n        dbt_custom_envs\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__model_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__model_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__model_executions"], "alias": "stg_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "838f0f4d3e7fc7e36bb8d3f183bb86bc24cdabc0a00474298175c3f8b829cb60"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about model executions. One row per model execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bytes_processed": {"name": "bytes_processed", "description": "Number of bytes processed by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__model_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4848793, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__model_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('model_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        {% if target.type == 'bigquery' %}\n            bytes_processed,\n        {% endif %}\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "model_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.model_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__model_executions.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.model_executions\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        \n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__snapshot_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__snapshot_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__snapshot_executions.sql", "original_file_path": "models/staging/stg_dbt__snapshot_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__snapshot_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshot_executions"], "alias": "stg_dbt__snapshot_executions", "checksum": {"name": "sha256", "checksum": "92e77fda2ce7ffd3e6edd41579564ad719fc1f1212d6dc41e4701c1bda7f3841"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about snapshot executions. One row per snapshot execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adapter_response": {"name": "adapter_response", "description": "Response provided by the adapter as JSON.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshot_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.49702, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__snapshot_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshot_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "snapshot_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.snapshot_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__snapshot_executions.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.snapshot_executions\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        materialization,\n        schema, -- noqa\n        name,\n        alias,\n        message,\n        adapter_response\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__test_executions": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__test_executions", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "fqn": ["dbt_artifacts", "staging", "stg_dbt__test_executions"], "alias": "stg_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "7b853f126d1c8a0f661ad02777eed4aff54326d0e2b8d5e63fc9728e9df7b2a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about test executions. One row per test execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp when the node started compiling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Test failures. Value is 1 if the test failed, 0 if successful.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp when the node's SQL query completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "Number of rows affected by the model execution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Represents the execution status of a node, can be success, failure, or error.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Which thread executed this node? E.g. Thread-1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "Total time spent executing this node (seconds).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean flag indicating whether the nodes run was a full refresh or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Result report, based on information returned from the database", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__test_executions.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4890478, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__test_executions", "raw_code": "with base as (\n\n    select *\n    from {{ ref('test_executions') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        {{ split_part('thread_id', \"'-'\", 2) }} as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "test_executions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key", "macro.dbt.split_part"], "nodes": ["model.dbt_artifacts.test_executions"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__test_executions.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.test_executions\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        was_full_refresh,\n        \n\n    split_part(\n        thread_id,\n        '-',\n        2\n        )\n\n as thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        failures,\n        message\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__seeds": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__seeds", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__seeds.sql", "original_file_path": "models/staging/stg_dbt__seeds.sql", "unique_id": "model.dbt_artifacts.stg_dbt__seeds", "fqn": ["dbt_artifacts", "staging", "stg_dbt__seeds"], "alias": "stg_dbt__seeds", "checksum": {"name": "sha256", "checksum": "e13641fa3693779fe9c7457f4705deff6149ae1cff14de40944a0d2d2baf7fbe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Stageing model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seed_execution_id": {"name": "seed_execution_id", "description": "Execution ID of the seed node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4862251, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__seeds", "raw_code": "with base as (\n\n    select *\n    from {{ ref('seeds') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "seeds", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.seeds"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__seeds.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.seeds\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as seed_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        package_name,\n        path,\n        checksum,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__sources": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__sources", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "unique_id": "model.dbt_artifacts.stg_dbt__sources", "fqn": ["dbt_artifacts", "staging", "stg_dbt__sources"], "alias": "stg_dbt__sources", "checksum": {"name": "sha256", "checksum": "fc17534ee4f5f3307a8ae0a3e40a26195bbb631e77a005b7bc09d87dd6ffd791"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about sources. One row per node per execution.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "freshness": {"name": "freshness", "description": "The specified freshness of the source model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "Source identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "A column name (or expression) that returns a timestamp indicating freshness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "loader": {"name": "loader", "description": "Describes the tool that loads this source into your warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_execution_id": {"name": "source_execution_id", "description": "Execution ID of the source node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "Source name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__sources.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4827907, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__sources", "raw_code": "with base as (\n\n    select *\n    from {{ ref('sources') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.sources"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__sources.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.sources\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as source_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        source_name,\n        loader,\n        name,\n        identifier,\n        loaded_at_field,\n        freshness\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__models": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__models", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "unique_id": "model.dbt_artifacts.stg_dbt__models", "fqn": ["dbt_artifacts", "staging", "stg_dbt__models"], "alias": "stg_dbt__models", "checksum": {"name": "sha256", "checksum": "0a664afe03945dbaae372463eae188b78b521749277ba76892822589903836b9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about model executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The materialization of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "Execution ID of the model node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The meta field of the config associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.492384, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__models", "raw_code": "with base as (\n\n    select *\n    from {{ ref('models') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.models"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__models.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.models\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as model_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        materialization,\n        tags,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__tests": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__tests", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__tests.sql", "original_file_path": "models/staging/stg_dbt__tests.sql", "unique_id": "model.dbt_artifacts.stg_dbt__tests", "fqn": ["dbt_artifacts", "staging", "stg_dbt__tests"], "alias": "stg_dbt__tests", "checksum": {"name": "sha256", "checksum": "7b637a0590b30d0bef21fcb5c57af5a0fbeceb33e5e01819fbd4755dbfdd5c74"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about test executions. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_execution_id": {"name": "test_execution_id", "description": "Execution ID of the test node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_path": {"name": "test_path", "description": "Path to the yaml (SQL in case of a singular test) file describing the test.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__tests.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4876206, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__tests", "raw_code": "with base as (\n\n    select *\n    from {{ ref('tests') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.tests"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__tests.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.tests\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as test_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        depends_on_nodes,\n        package_name,\n        test_path,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__snapshots": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__snapshots", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__snapshots.sql", "original_file_path": "models/staging/stg_dbt__snapshots.sql", "unique_id": "model.dbt_artifacts.stg_dbt__snapshots", "fqn": ["dbt_artifacts", "staging", "stg_dbt__snapshots"], "alias": "stg_dbt__snapshots", "checksum": {"name": "sha256", "checksum": "74411b1790f62e26679e3313efb3c5cc3a48fa5581659f859d7e6805872c9f47"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains metadata about seed executions. One row per node per run.", "columns": {"checksum": {"name": "checksum", "description": "Checksum of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "database": {"name": "database", "description": "The configured database for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Configured schema for the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snapshot_execution_id": {"name": "snapshot_execution_id", "description": "Execution ID of the snapshot node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "strategy": {"name": "strategy", "description": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "Alias of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__snapshots.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4938095, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__snapshots", "raw_code": "with base as (\n\n    select *\n    from {{ ref('snapshots') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.snapshots"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__snapshots.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.snapshots\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as snapshot_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        database,\n        schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        path,\n        checksum,\n        strategy,\n        meta,\n        alias\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_artifacts.stg_dbt__exposures": {"database": "dbt_artifacts_ci_tests", "schema": "dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51", "name": "stg_dbt__exposures", "resource_type": "model", "package_name": "dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "fqn": ["dbt_artifacts", "staging", "stg_dbt__exposures"], "alias": "stg_dbt__exposures", "checksum": {"name": "sha256", "checksum": "ed5659a51982675abe6dd58ae003be71a3681da997e6f3edf219dfc800fb6f38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "file_format": "delta", "post-hook": [], "pre-hook": []}, "tags": [], "description": "Staging model that contains data about exposure exections. One row per node per run.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "Array of node identifiers that this node depends on in the execution graph.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Node description.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exposure_execution_id": {"name": "exposure_execution_id", "description": "Execution ID of the exposure node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "Exposure maturity; one of high, medium, low.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique node identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Owner of the exposure, usually an email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Name of the dbt package which contains the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Path to the model on the local filesystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "The start timestamp of the dbt execution which generated the record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "The URL of the BI tool where the data defined by the exposure can be viewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Tags used in resource selection associated with the node.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://models/staging/stg_dbt__exposures.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "file_format": "delta"}, "created_at": 1695909258.4952848, "relation_name": "dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.stg_dbt__exposures", "raw_code": "with base as (\n\n    select *\n    from {{ ref('exposures') }}\n\n),\n\nenhanced as (\n\n    select\n        {{ dbt_artifacts.generate_surrogate_key(['command_invocation_id', 'node_id']) }} as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "language": "sql", "refs": [{"name": "exposures", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_artifacts.generate_surrogate_key"], "nodes": ["model.dbt_artifacts.exposures"]}, "compiled_path": "target/compiled/dbt_artifacts/models/staging/stg_dbt__exposures.sql", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from dbt_artifacts_ci_tests.dbt_artifacts_test_commit__af2ed3136d79e1794c438abb6843672ded391a51.exposures\n\n),\n\nenhanced as (\n\n    select\n        \nmd5(cast(coalesce(cast(command_invocation_id as TEXT), '') || '-' || coalesce(cast(node_id as TEXT), '') as TEXT)) as exposure_execution_id,\n        command_invocation_id,\n        node_id,\n        run_started_at,\n        name,\n        type,\n        owner,\n        maturity,\n        path,\n        description,\n        url,\n        package_name,\n        depends_on_nodes,\n        tags\n    from base\n\n)\n\nselect * from enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}}, "sources": {}, "macros": {"macro.dbt_artifacts.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/generate_surrogate_key.sql", "original_file_path": "macros/database_specific_helpers/generate_surrogate_key.sql", "unique_id": "macro.dbt_artifacts.generate_surrogate_key", "macro_sql": "\n\n{%- macro generate_surrogate_key(field_list) -%}\n    {# Note - update the reference to `dbt_utils` to `dbt_artifacts` here #}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_artifacts')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__generate_surrogate_key"]}, "description": "Since folks commonly install dbt_artifacts alongside a myriad of other packages,\nwe copy the dbt_utils implementation of the surrogate_key macro so we don't have\nany dependencies to make conflicts worse!\n\nThis version is:\nURL: https://github.com/dbt-labs/dbt-utils/blob/main/macros/sql/generate_surrogate_key.sql\nCommit SHA: eaa0e41b033bdf252eff0ae014ec11888f37ebff\nDate: 2023-04-28\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "field_list", "type": "list", "description": "A list of fields to concatenate together to form the surrogate key\n"}], "created_at": 1695909258.3823028, "supported_languages": null}, "macro.dbt_artifacts.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/generate_surrogate_key.sql", "original_file_path": "macros/database_specific_helpers/generate_surrogate_key.sql", "unique_id": "macro.dbt_artifacts.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{# Note - Removed this logic to retain consistency with the previous surrogate_key logic #}\n{# {%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%} #}\n{%- set default_null_value = \"\" -%}\n{# {%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%} #}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.4951005, "supported_languages": null}, "macro.dbt_artifacts.get_relation": {"name": "get_relation", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/get_relation.sql", "original_file_path": "macros/database_specific_helpers/get_relation.sql", "unique_id": "macro.dbt_artifacts.get_relation", "macro_sql": "{% macro get_relation(relation_name) %}\n    {% if execute %}\n        {% set model_get_relation_node = graph.nodes.values() | selectattr('name', 'equalto', relation_name) | first %}\n        {% set relation = api.Relation.create(\n            database = model_get_relation_node.database,\n            schema = model_get_relation_node.schema,\n            identifier = model_get_relation_node.alias\n        )\n        %}\n        {% do return(relation) %}\n    {% else %}\n        {% do return(api.Relation.create()) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Identify a relation in the graph from a relation name\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "get_relation_name", "type": "string", "description": "The name of the relation to return from the graph\n"}], "created_at": 1695909258.3839335, "supported_languages": null}, "macro.dbt_artifacts.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_boolean", "macro_sql": "{% macro type_boolean() %}\n    {{ return(adapter.dispatch('type_boolean', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__type_boolean"]}, "description": "Dependent on the adapter type, returns the native boolean type.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [], "created_at": 1695909258.3868048, "supported_languages": null}, "macro.dbt_artifacts.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_boolean", "macro_sql": "{% macro default__type_boolean() %}\n   {{ return(api.Column.translate_type(\"boolean\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.4984715, "supported_languages": null}, "macro.dbt_artifacts.type_json": {"name": "type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_json", "macro_sql": "{% macro type_json() %}\n    {{ return(adapter.dispatch('type_json', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_json"]}, "description": "Dependent on the adapter type, returns the native type for storing JSON.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [], "created_at": 1695909258.3874505, "supported_languages": null}, "macro.dbt_artifacts.default__type_json": {"name": "default__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_json", "macro_sql": "{% macro default__type_json() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.4993744, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_json": {"name": "snowflake__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.snowflake__type_json", "macro_sql": "{% macro snowflake__type_json() %}\n   object\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.4996002, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_json": {"name": "bigquery__type_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.bigquery__type_json", "macro_sql": "{% macro bigquery__type_json() %}\n   json\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.4998088, "supported_languages": null}, "macro.dbt_artifacts.type_array": {"name": "type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.type_array", "macro_sql": "{% macro type_array() %}\n    {{ return(adapter.dispatch('type_array', 'dbt_artifacts')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__type_array"]}, "description": "Dependent on the adapter type, returns the native type for storing an array.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [], "created_at": 1695909258.3859434, "supported_languages": null}, "macro.dbt_artifacts.default__type_array": {"name": "default__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.default__type_array", "macro_sql": "{% macro default__type_array() %}\n   {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.500679, "supported_languages": null}, "macro.dbt_artifacts.snowflake__type_array": {"name": "snowflake__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.snowflake__type_array", "macro_sql": "{% macro snowflake__type_array() %}\n   array\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5009012, "supported_languages": null}, "macro.dbt_artifacts.bigquery__type_array": {"name": "bigquery__type_array", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/type_helpers.sql", "original_file_path": "macros/database_specific_helpers/type_helpers.sql", "unique_id": "macro.dbt_artifacts.bigquery__type_array", "macro_sql": "{% macro bigquery__type_array() %}\n   array<string>\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5011098, "supported_languages": null}, "macro.dbt_artifacts.column_identifier": {"name": "column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/column_identifier.sql", "original_file_path": "macros/database_specific_helpers/column_identifier.sql", "unique_id": "macro.dbt_artifacts.column_identifier", "macro_sql": "{% macro column_identifier(column_index) -%}\n  {{ return(adapter.dispatch('column_identifier')(column_index)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__column_identifier"]}, "description": "Dependent on the adapter type, return the identifier for a column using a numerical index.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "column_index", "type": "integer", "description": "The index of the column to return the identifier for\n"}], "created_at": 1695909258.3806603, "supported_languages": null}, "macro.dbt_artifacts.default__column_identifier": {"name": "default__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/column_identifier.sql", "original_file_path": "macros/database_specific_helpers/column_identifier.sql", "unique_id": "macro.dbt_artifacts.default__column_identifier", "macro_sql": "{% macro default__column_identifier(column_index) -%}\n    {{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5022724, "supported_languages": null}, "macro.dbt_artifacts.snowflake__column_identifier": {"name": "snowflake__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/column_identifier.sql", "original_file_path": "macros/database_specific_helpers/column_identifier.sql", "unique_id": "macro.dbt_artifacts.snowflake__column_identifier", "macro_sql": "{% macro snowflake__column_identifier(column_index) -%}\n    ${{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5025632, "supported_languages": null}, "macro.dbt_artifacts.spark__column_identifier": {"name": "spark__column_identifier", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/column_identifier.sql", "original_file_path": "macros/database_specific_helpers/column_identifier.sql", "unique_id": "macro.dbt_artifacts.spark__column_identifier", "macro_sql": "{% macro spark__column_identifier(column_index) -%}\n    col{{ column_index }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5028403, "supported_languages": null}, "macro.dbt_artifacts.parse_json": {"name": "parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/parse_json.sql", "original_file_path": "macros/database_specific_helpers/parse_json.sql", "unique_id": "macro.dbt_artifacts.parse_json", "macro_sql": "{% macro parse_json(field) -%}\n  {{ return(adapter.dispatch('parse_json')(field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__parse_json"]}, "description": "Dependent on the adapter type, return a column which parses the JSON field.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "field", "type": "string", "description": "The name of the field to parse\n"}], "created_at": 1695909258.3852081, "supported_languages": null}, "macro.dbt_artifacts.default__parse_json": {"name": "default__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/parse_json.sql", "original_file_path": "macros/database_specific_helpers/parse_json.sql", "unique_id": "macro.dbt_artifacts.default__parse_json", "macro_sql": "{% macro default__parse_json(field) -%}\n    {{ field }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5040038, "supported_languages": null}, "macro.dbt_artifacts.snowflake__parse_json": {"name": "snowflake__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/parse_json.sql", "original_file_path": "macros/database_specific_helpers/parse_json.sql", "unique_id": "macro.dbt_artifacts.snowflake__parse_json", "macro_sql": "{% macro snowflake__parse_json(field) -%}\n    parse_json({{ field }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5044253, "supported_languages": null}, "macro.dbt_artifacts.bigquery__parse_json": {"name": "bigquery__parse_json", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/database_specific_helpers/parse_json.sql", "original_file_path": "macros/database_specific_helpers/parse_json.sql", "unique_id": "macro.dbt_artifacts.bigquery__parse_json", "macro_sql": "{% macro bigquery__parse_json(field) -%}\n    safe.parse_json(\"\"\"{{ field }}\"\"\", wide_number_mode=>'round')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5047264, "supported_languages": null}, "macro.dbt_artifacts.migrate_from_v0_to_v1": {"name": "migrate_from_v0_to_v1", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/migration/migrate_from_v0_to_v1.sql", "original_file_path": "macros/migration/migrate_from_v0_to_v1.sql", "unique_id": "macro.dbt_artifacts.migrate_from_v0_to_v1", "macro_sql": "{%- macro migrate_from_v0_to_v1(old_database, old_schema, new_database, new_schema) -%}\n\n    {% set migrate_model_executions %}\n        insert into {{new_database}}.{{new_schema}}.model_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            model_materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            model_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__model_executions\n    {% endset %}\n\n    {{ log(\"Migrating model_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_model_executions }}\n    {%- endcall -%}\n\n    {% set migrate_tests %}\n        insert into {{new_database}}.{{new_schema}}.tests (\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            tags,\n            test_path,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            [],\n            test_path,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__tests\n    {% endset %}\n\n    {{ log(\"Migrating tests\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_tests }}\n    {%- endcall -%}\n\n    {% set migrate_test_executions %}\n        insert into {{new_database}}.{{new_schema}}.test_executions (\n            command_invocation_id,\n            compile_started_at,\n            failures,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            null,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__test_executions\n    {% endset %}\n\n    {{ log(\"Migrating test_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_test_executions }}\n    {%- endcall -%}\n\n    {% set migrate_models %}\n        insert into {{new_database}}.{{new_schema}}.models (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            materialization,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            model_database,\n            depends_on_nodes,\n            model_materialization,\n            name,\n            node_id,\n            package_name,\n            model_path,\n            model_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__models\n    {% endset %}\n\n    {{ log(\"Migrating models\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_models }}\n    {%- endcall -%}\n\n    {% set migrate_seeds %}\n        insert into {{new_database}}.{{new_schema}}.seeds (\n            checksum,\n            command_invocation_id,\n            database,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            seed_database,\n            name,\n            node_id,\n            package_name,\n            seed_path,\n            seed_schema,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__seeds\n    {% endset %}\n\n    {{ log(\"Migrating seeds\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seeds }}\n    {%- endcall -%}\n\n    {% set migrate_seed_executions %}\n        insert into {{new_database}}.{{new_schema}}.seed_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'seed',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            seed_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__seed_executions\n    {% endset %}\n\n    {{ log(\"Migrating seed_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_seed_executions }}\n    {%- endcall -%}\n\n    {% set migrate_exposures %}\n        insert into {{new_database}}.{{new_schema}}.exposures (\n            command_invocation_id,\n            depends_on_nodes,\n            description,\n            maturity,\n            name,\n            node_id,\n            owner,\n            package_name,\n            path,\n            type,\n            url,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            array_agg(output_feeds), {#- Here we un-flatten the transformation originally done -#}\n            null,\n            any_value(maturity) as maturity,\n            name,\n            node_id,\n            null, {#- v0 is a string, v1 is a variant -#}\n            any_value(package_name) as package_name,\n            null,\n            any_value(type) as type,\n            null,\n            any_value(artifact_generated_at) as artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__exposures\n        group by command_invocation_id, node_id, name, artifact_generated_at\n    {% endset %}\n\n    {{ log(\"Migrating exposures\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_exposures }}\n    {%- endcall -%}\n\n    {% set migrate_snapshots %}\n        insert into {{new_database}}.{{new_schema}}.snapshots (\n            checksum,\n            command_invocation_id,\n            database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            path,\n            schema,\n            strategy,\n            run_started_at\n        )\n        select\n            checksum,\n            command_invocation_id,\n            snapshot_database,\n            depends_on_nodes,\n            name,\n            node_id,\n            package_name,\n            snapshot_path,\n            snapshot_schema,\n            null,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__snapshots\n    {% endset %}\n\n    {{ log(\"Migrating snapshots\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshots }}\n    {%- endcall -%}\n\n    {% set migrate_snapshot_executions %}\n        insert into {{new_database}}.{{new_schema}}.snapshot_executions (\n            command_invocation_id,\n            compile_started_at,\n            materialization,\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            compile_started_at,\n            'snapshot',\n            name,\n            node_id,\n            query_completed_at,\n            rows_affected,\n            snapshot_schema,\n            status,\n            thread_id,\n            total_node_runtime,\n            was_full_refresh,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.fct_dbt__snapshot_executions\n    {% endset %}\n\n    {{ log(\"Migrating snapshot_executions\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_snapshot_executions }}\n    {%- endcall -%}\n\n    {% set migrate_sources %}\n        insert into {{new_database}}.{{new_schema}}.sources (\n            command_invocation_id,\n            database,\n            freshness,\n            identifier,\n            loaded_at_field,\n            loader,\n            name,\n            node_id,\n            schema,\n            source_name,\n            run_started_at\n        )\n        select\n            command_invocation_id,\n            node_database,\n            parse_json('[{\"error_after\":{\"count\":null,\"period\":null},\"filter\":null,\"warn_after\":{\"count\":null,\"period\":null}}]'),\n            name,\n            null,\n            source_loader,\n            name,\n            node_id,\n            source_schema,\n            source_name,\n            artifact_generated_at\n        from {{old_database}}.{{old_schema}}.dim_dbt__sources\n    {% endset %}\n\n    {{ log(\"Migrating sources\", info=True) }}\n    {%- call statement(auto_begin=True) -%}\n        {{ migrate_sources }}\n    {%- endcall -%}\n\n    {{ log(\"Migration complete. You can now safely delete any data from before 1.0.0\", info=True) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "A macro to assist with migrating from v0 to v1 of dbt_artifacts. See\nhttps://github.com/brooklyn-data/dbt_artifacts/blob/main/README.md#migrating-from-100-to-100\nfor details on the usage.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "old_database", "type": "string", "description": "The database of the <1.0.0 output (fct_/dim_) models - does not have to be different to `new_database`\n"}, {"name": "old_schema", "type": "string", "description": "The schema of the <1.0.0 output (fct_/dim_) models - does not have to be different to `new_schema`\n"}, {"name": "new_database", "type": "string", "description": "The target database that the v1 artifact sources are in - does not have to be different to `old_database`\n"}, {"name": "new_schema", "type": "string", "description": "The target schema that the v1 artifact sources are in - does not have to be different to `old_schema`\n"}], "created_at": 1695909258.3901498, "supported_languages": null}, "macro.dbt_artifacts.get_table_content_values": {"name": "get_table_content_values", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/get_table_content_values.sql", "original_file_path": "macros/upload_results/get_table_content_values.sql", "unique_id": "macro.dbt_artifacts.get_table_content_values", "macro_sql": "{% macro get_table_content_values(dataset, objects_to_upload) %}\n\n    {# Convert the results to data to be imported #}\n\n    {% if dataset == 'model_executions' %}\n        {% set content = dbt_artifacts.upload_model_executions(objects_to_upload) %}\n    {% elif dataset == 'seed_executions' %}\n        {% set content = dbt_artifacts.upload_seed_executions(objects_to_upload) %}\n    {% elif dataset == 'test_executions' %}\n        {% set content = dbt_artifacts.upload_test_executions(objects_to_upload) %}\n    {% elif dataset == 'snapshot_executions' %}\n        {% set content = dbt_artifacts.upload_snapshot_executions(objects_to_upload) %}\n    {% elif dataset == 'exposures' %}\n        {% set content = dbt_artifacts.upload_exposures(objects_to_upload) %}\n    {% elif dataset == 'models' %}\n        {% set content = dbt_artifacts.upload_models(objects_to_upload) %}\n    {% elif dataset == 'seeds' %}\n        {% set content = dbt_artifacts.upload_seeds(objects_to_upload) %}\n    {% elif dataset == 'snapshots' %}\n        {% set content = dbt_artifacts.upload_snapshots(objects_to_upload) %}\n    {% elif dataset == 'sources' %}\n        {% set content = dbt_artifacts.upload_sources(objects_to_upload) %}\n    {% elif dataset == 'tests' %}\n        {% set content = dbt_artifacts.upload_tests(objects_to_upload) %}\n    {# Invocations only requires data from variables available in the macro #}\n    {% elif dataset == 'invocations' %}\n        {% set content = dbt_artifacts.upload_invocations() %}\n    {% endif %}\n\n    {{ return(content) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.upload_model_executions", "macro.dbt_artifacts.upload_seed_executions", "macro.dbt_artifacts.upload_test_executions", "macro.dbt_artifacts.upload_snapshot_executions", "macro.dbt_artifacts.upload_exposures", "macro.dbt_artifacts.upload_models", "macro.dbt_artifacts.upload_seeds", "macro.dbt_artifacts.upload_snapshots", "macro.dbt_artifacts.upload_sources", "macro.dbt_artifacts.upload_tests", "macro.dbt_artifacts.upload_invocations"]}, "description": "A macro to create the insert statement values required to be uploaded to the table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "dataset", "type": "string", "description": "The name of the dataset to return the column names for e.g. `models`\n"}, {"name": "objects_to_upload", "type": "list", "description": "The objects to be used to generate the insert statement values - extracted from `get_dataset_content`\n"}], "created_at": 1695909258.4041352, "supported_languages": null}, "macro.dbt_artifacts.insert_into_metadata_table": {"name": "insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.insert_into_metadata_table", "macro_sql": "{% macro insert_into_metadata_table(dataset, fields, content) -%}\n\n    {% if content != \"\" %}\n\n        {# Get the relation that the results will be uploaded to #}\n        {% set dataset_relation = dbt_artifacts.get_relation(dataset) %}\n        {# Insert the data into the table #}\n        {{ return(adapter.dispatch('insert_into_metadata_table', 'dbt_artifacts')(dataset_relation, fields, content)) }}\n\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.get_relation", "macro.dbt_artifacts.snowflake__insert_into_metadata_table"]}, "description": "Dependent on the adapter type, the wrapper to insert the data into a table from a list of values. Used in the\n`upload_results` macro, alongside the `get_column_lists` macro to generate the column names and the\n`upload_dataset` macros to generate the data to be inserted.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "database_name", "type": "string", "description": "The database name for the relation that the data is to be inserted into\n"}, {"name": "schema_name", "type": "string", "description": "The schema name for the relation that the data is to be inserted into\n"}, {"name": "table_name", "type": "string", "description": "The table name for the relation that the data is to be inserted into\n"}, {"name": "fields", "type": "string", "description": "The list of fields for the relation that the data is to be inserted into\n"}, {"name": "content", "type": "string", "description": "The data content to insert into the relation\n"}], "created_at": 1695909258.4076116, "supported_languages": null}, "macro.dbt_artifacts.spark__insert_into_metadata_table": {"name": "spark__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.spark__insert_into_metadata_table", "macro_sql": "{% macro spark__insert_into_metadata_table(relation, fields, content) -%}\n\n    {% set insert_into_table_query %}\n    insert into {{ relation }} {{ fields }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5381427, "supported_languages": null}, "macro.dbt_artifacts.snowflake__insert_into_metadata_table": {"name": "snowflake__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.snowflake__insert_into_metadata_table", "macro_sql": "{% macro snowflake__insert_into_metadata_table(relation, fields, content) -%}\n\n    {% set insert_into_table_query %}\n    insert into {{ relation }} {{ fields }}\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5389864, "supported_languages": null}, "macro.dbt_artifacts.bigquery__insert_into_metadata_table": {"name": "bigquery__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.bigquery__insert_into_metadata_table", "macro_sql": "{% macro bigquery__insert_into_metadata_table(relation, fields, content) -%}\n\n    {% set insert_into_table_query %}\n    insert into {{ relation }} {{ fields }}\n    values\n    {{ content }}\n    {% endset %}\n\n    {% do run_query(insert_into_table_query) %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5397985, "supported_languages": null}, "macro.dbt_artifacts.default__insert_into_metadata_table": {"name": "default__insert_into_metadata_table", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/insert_into_metadata_table.sql", "original_file_path": "macros/upload_results/insert_into_metadata_table.sql", "unique_id": "macro.dbt_artifacts.default__insert_into_metadata_table", "macro_sql": "{% macro default__insert_into_metadata_table(relation, fields, content) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5400844, "supported_languages": null}, "macro.dbt_artifacts.get_column_name_list": {"name": "get_column_name_list", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/get_column_name_lists.sql", "original_file_path": "macros/upload_results/get_column_name_lists.sql", "unique_id": "macro.dbt_artifacts.get_column_name_list", "macro_sql": "{% macro get_column_name_list(dataset) -%}\n\n    {% if dataset == 'exposures' %}\n\n        (\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            name,\n            type,\n            owner,\n            maturity,\n            path,\n            description,\n            url,\n            package_name,\n            depends_on_nodes,\n            tags,\n            all_results\n        )\n\n    {% elif dataset == 'invocations' %}\n\n        (\n            command_invocation_id,\n            dbt_version,\n            project_name,\n            run_started_at,\n            dbt_command,\n            full_refresh_flag,\n            target_profile_name,\n            target_name,\n            target_schema,\n            target_threads,\n            dbt_cloud_project_id,\n            dbt_cloud_job_id,\n            dbt_cloud_run_id,\n            dbt_cloud_run_reason_category,\n            dbt_cloud_run_reason,\n            env_vars,\n            dbt_vars,\n            invocation_args,\n            dbt_custom_envs\n        )\n\n    {% elif dataset == 'model_executions' %}\n\n        (\n            node_id,\n            command_invocation_id,\n            run_started_at,\n            was_full_refresh,\n            thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            {% if target.type == 'bigquery' %}\n                bytes_processed,\n            {% endif %}\n            materialization,\n            schema,\n            name,\n            alias,\n            message,\n            adapter_response\n        )\n\n    {% elif dataset == 'models' %}\n\n        (\n            node_id,\n            command_invocation_id,\n            run_started_at,\n            database,\n            schema,\n            name,\n            depends_on_nodes,\n            package_name,\n            path,\n            checksum,\n            materialization,\n            tags,\n            meta,\n            alias,\n            all_results\n        )\n\n\n    {% elif dataset == 'seed_executions' %}\n\n        (\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            materialization,\n            schema,\n            name,\n            alias,\n            message,\n            adapter_response\n        )\n\n    {% elif dataset == 'seeds' %}\n\n        (\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            database,\n            schema,\n            name,\n            package_name,\n            path,\n            checksum,\n            meta,\n            alias,\n            all_results\n        )\n\n    {% elif dataset == 'snapshot_executions' %}\n\n        (\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            materialization,\n            schema,\n            name,\n            alias,\n            message,\n            adapter_response\n        )\n\n    {% elif dataset == 'snapshots' %}\n\n        (\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            database,\n            schema,\n            name,\n            depends_on_nodes,\n            package_name,\n            path,\n            checksum,\n            strategy,\n            meta,\n            alias,\n            all_results\n        )\n\n    {% elif dataset == 'sources' %}\n\n        (\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            database,\n            schema,\n            source_name,\n            loader,\n            name,\n            identifier,\n            loaded_at_field,\n            freshness,\n            all_results\n        )\n\n    {% elif dataset == 'test_executions' %}\n\n        (\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            was_full_refresh,\n            thread_id,\n            status,\n            compile_started_at,\n            query_completed_at,\n            total_node_runtime,\n            rows_affected,\n            failures,\n            message,\n            adapter_response\n        )\n\n    {% elif dataset == 'tests' %}\n\n        (\n            command_invocation_id,\n            node_id,\n            run_started_at,\n            name,\n            depends_on_nodes,\n            package_name,\n            test_path,\n            tags,\n            all_results\n        )\n\n    {% else %}\n\n        /* No column list available */\n\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "A macro to return the list of column names for a particular dataset. Returns a comment if the dataset is not\nvalid.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "dataset", "type": "string", "description": "The name of the dataset to return the column names for e.g. `models`\n"}], "created_at": 1695909258.4021087, "supported_languages": null}, "macro.dbt_artifacts.get_dataset_content": {"name": "get_dataset_content", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/get_dataset_content.sql", "original_file_path": "macros/upload_results/get_dataset_content.sql", "unique_id": "macro.dbt_artifacts.get_dataset_content", "macro_sql": "{% macro get_dataset_content(dataset) %}\n\n    {% if dataset in ['model_executions', 'seed_executions', 'test_executions', 'snapshot_executions'] %}\n        {# Executions make use of the results object #}\n        {% set objects = results | selectattr(\"node.resource_type\", \"equalto\", dataset.split(\"_\")[0]) | list %}\n    {% elif dataset in ['seeds', 'snapshots', 'tests', 'models'] %}\n        {# Use the nodes in the [graph](https://docs.getdbt.com/reference/dbt-jinja-functions/graph) to extract details #}\n        {% set objects = graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", dataset[:-1]) | list %}\n    {% elif dataset in ['exposures', 'sources'] %}\n        {# Use the [graph](https://docs.getdbt.com/reference/dbt-jinja-functions/graph) to extract details #}\n        {% set objects = graph.get(dataset).values() | list %}\n    {% elif dataset == 'invocations' %}\n        {#\n            Invocations doesn't need anything input, but we include this so that it will still be picked up\n            as part of the loop below - the length must be >0 to allow for an upload, hence the empty string\n        #}\n        {% set objects = [''] %}\n    {% endif %}\n\n    {{ return(objects) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "A macro to extract the data to be uploaded from either the results or the graph object.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "dataset", "type": "string", "description": "The name of the dataset to return the data for e.g. `models`\n"}], "created_at": 1695909258.402862, "supported_languages": null}, "macro.dbt_artifacts.upload_results": {"name": "upload_results", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_results/upload_results.sql", "original_file_path": "macros/upload_results/upload_results.sql", "unique_id": "macro.dbt_artifacts.upload_results", "macro_sql": "{% macro upload_results(results) -%}\n\n    {% if execute %}\n\n        {% set datasets_to_load = ['exposures', 'seeds', 'snapshots', 'invocations', 'sources', 'tests', 'models'] %}\n        {% if results != [] %}\n            {# When executing, and results are available, then upload the results #}\n            {% set datasets_to_load = ['model_executions', 'seed_executions', 'test_executions', 'snapshot_executions'] + datasets_to_load %}\n        {% endif %}\n\n        {# Upload each data set in turn #}\n        {% for dataset in datasets_to_load %}\n\n            {% do log(\"Uploading \" ~ dataset.replace(\"_\", \" \"), true) %}\n\n            {# Get the results that need to be uploaded #}\n            {% set objects = dbt_artifacts.get_dataset_content(dataset) %}\n\n            {# Upload in chunks to reduce query size #}\n            {% if dataset == 'model' %}\n                {% set upload_limit = 50 if target.type == 'bigquery' else 100 %}\n            {% else %}\n                {% set upload_limit = 300 if target.type == 'bigquery' else 5000 %}\n            {% endif %}\n\n            {# Loop through each chunk in turn #}\n            {% for i in range(0, objects | length, upload_limit) -%}\n\n                {# Get just the objects to load on this loop #}\n                {% set content = dbt_artifacts.get_table_content_values(dataset, objects[i: i + upload_limit]) %}\n\n                {# Insert the content into the metadata table #}\n                {{ dbt_artifacts.insert_into_metadata_table(\n                    dataset=dataset,\n                    fields=dbt_artifacts.get_column_name_list(dataset),\n                    content=content\n                    )\n                }}\n\n            {# Loop the next 'chunk' #}\n            {% endfor %}\n\n        {# Loop the next 'dataset' #}\n        {% endfor %}\n\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_artifacts.get_dataset_content", "macro.dbt_artifacts.get_table_content_values", "macro.dbt_artifacts.insert_into_metadata_table", "macro.dbt_artifacts.get_column_name_list"]}, "description": "The main macro called to upload the metadata into each of the source tables.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "results", "type": "list", "description": "The results object from dbt."}], "created_at": 1695909258.4088852, "supported_languages": null}, "macro.dbt_artifacts.upload_seeds": {"name": "upload_seeds", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seeds.sql", "original_file_path": "macros/upload_individual_datasets/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.upload_seeds", "macro_sql": "{% macro upload_seeds(seeds) -%}\n    {{ return(adapter.dispatch('get_seeds_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_seeds_dml_sql"]}, "description": "The macro to support upload of the data to the seeds table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "seeds", "type": "list", "description": "A list of seeds objects extracted from the dbt graph\n"}], "created_at": 1695909258.39611, "supported_languages": null}, "macro.dbt_artifacts.default__get_seeds_dml_sql": {"name": "default__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seeds.sql", "original_file_path": "macros/upload_individual_datasets/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.default__get_seeds_dml_sql", "macro_sql": "{% macro default__get_seeds_dml_sql(seeds) -%}\n\n    {% if seeds != [] %}\n        {% set seed_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(10)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for seed in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ seed.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ seed.database }}', {# database #}\n                '{{ seed.schema }}', {# schema #}\n                '{{ seed.name }}', {# name #}\n                '{{ seed.package_name }}', {# package_name #}\n                '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ seed.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n                '{{ tojson(seed.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ seed.alias }}', {# alias #}\n                {% if var('dbt_artifacts_exclude_all_results', false) %}\n                    null\n                {% else %}\n                    '{{ tojson(seed) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n                {% endif %}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.563968, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seeds_dml_sql": {"name": "bigquery__get_seeds_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seeds.sql", "original_file_path": "macros/upload_individual_datasets/upload_seeds.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_seeds_dml_sql", "macro_sql": "{% macro bigquery__get_seeds_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_values %}\n            {% for seed in seeds -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ seed.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ seed.database }}', {# database #}\n                    '{{ seed.schema }}', {# schema #}\n                    '{{ seed.name }}', {# name #}\n                    '{{ seed.package_name }}', {# package_name #}\n                    '{{ seed.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ seed.checksum.checksum | replace('\\\\', '\\\\\\\\')}}', {# checksum #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(seed.config.meta)) }}, {# meta #}\n                    '{{ seed.alias }}', {# alias #}\n                    {% if var('dbt_artifacts_exclude_all_results', false) %}\n                        null\n                    {% else %}\n                        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(seed) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                    {% endif %}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ seed_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.567377, "supported_languages": null}, "macro.dbt_artifacts.upload_exposures": {"name": "upload_exposures", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_exposures.sql", "original_file_path": "macros/upload_individual_datasets/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.upload_exposures", "macro_sql": "{% macro upload_exposures(exposures) -%}\n    {{ return(adapter.dispatch('get_exposures_dml_sql', 'dbt_artifacts')(exposures)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_exposures_dml_sql"]}, "description": "The macro to support upload of the data to the exposures table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "exposures", "type": "list", "description": "A list of exposure objects extracted from the dbt graph\n"}], "created_at": 1695909258.3913352, "supported_languages": null}, "macro.dbt_artifacts.default__get_exposures_dml_sql": {"name": "default__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_exposures.sql", "original_file_path": "macros/upload_individual_datasets/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.default__get_exposures_dml_sql", "macro_sql": "{% macro default__get_exposures_dml_sql(exposures) -%}\n\n    {% if exposures != [] %}\n        {% set exposure_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(6)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(14)) }}\n        from values\n        {% for exposure in exposures -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                '{{ exposure.type }}', {# type #}\n                '{{ tojson(exposure.owner) }}', {# owner #}\n                '{{ exposure.maturity }}', {# maturity #}\n                '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ exposure.description | replace(\"'\",\"\\\\'\") }}', {# description #}\n                '{{ exposure.url }}', {# url #}\n                '{{ exposure.package_name }}', {# package_name #}\n                '{{ tojson(exposure.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ tojson(exposure.tags) }}', {# tags #}\n                {% if var('dbt_artifacts_exclude_all_results', false) %}\n                    null\n                {% else %}\n                    '{{ tojson(exposure) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n                {% endif %}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5797248, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_exposures_dml_sql": {"name": "bigquery__get_exposures_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_exposures.sql", "original_file_path": "macros/upload_individual_datasets/upload_exposures.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_exposures_dml_sql", "macro_sql": "{% macro bigquery__get_exposures_dml_sql(exposures) -%}\n    {% if exposures != [] %}\n        {% set exposure_values %}\n            {% for exposure in exposures -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ exposure.unique_id | replace(\"'\",\"\\\\'\") }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ exposure.name | replace(\"'\",\"\\\\'\") }}', {# name #}\n                    '{{ exposure.type }}', {# type #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(exposure.owner) | replace(\"'\",\"\\\\'\")) }}, {# owner #}\n                    '{{ exposure.maturity }}', {# maturity #}\n                    '{{ exposure.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    \"\"\"{{ exposure.description | replace(\"'\",\"\\\\'\") }}\"\"\", {# description #}\n                    '{{ exposure.url }}', {# url #}\n                    '{{ exposure.package_name }}', {# package_name #}\n                    {{ tojson(exposure.depends_on.nodes) }}, {# depends_on_nodes #}\n                    {{ tojson(exposure.tags) }}, {# tags #}\n                    {% if var('dbt_artifacts_exclude_all_results', false) %}\n                        null\n                    {% else %}\n                        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(exposure) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                    {% endif %}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ exposure_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5839772, "supported_languages": null}, "macro.dbt_artifacts.upload_tests": {"name": "upload_tests", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_tests.sql", "original_file_path": "macros/upload_individual_datasets/upload_tests.sql", "unique_id": "macro.dbt_artifacts.upload_tests", "macro_sql": "{% macro upload_tests(tests) -%}\n    {{ return(adapter.dispatch('get_tests_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_tests_dml_sql"]}, "description": "The macro to support upload of the data to the tests table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "tests", "type": "list", "description": "A list of test objects extracted from the dbt graph\n"}], "created_at": 1695909258.400751, "supported_languages": null}, "macro.dbt_artifacts.default__get_tests_dml_sql": {"name": "default__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_tests.sql", "original_file_path": "macros/upload_individual_datasets/upload_tests.sql", "unique_id": "macro.dbt_artifacts.default__get_tests_dml_sql", "macro_sql": "{% macro default__get_tests_dml_sql(tests) -%}\n\n    {% if tests != [] %}\n        {% set test_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(5)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(8)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(9)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ test.name }}', {# name #}\n                '{{ tojson(test.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ test.package_name }}', {# package_name #}\n                '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                '{{ tojson(test.tags) }}', {# tags #}\n                {% if var('dbt_artifacts_exclude_all_results', false) %}\n                    null\n                {% else %}\n                    '{{ tojson(test) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_fields #}\n                {% endif %}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.5926182, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_tests_dml_sql": {"name": "bigquery__get_tests_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_tests.sql", "original_file_path": "macros/upload_individual_datasets/upload_tests.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_tests_dml_sql", "macro_sql": "{% macro bigquery__get_tests_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_values %}\n            {% for test in tests -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ test.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ test.name }}', {# name #}\n                    {{ tojson(test.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ test.package_name }}', {# package_name #}\n                    '{{ test.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# test_path #}\n                    {{ tojson(test.tags) }}, {# tags #}\n                    {% if var('dbt_artifacts_exclude_all_results', false) %}\n                        null\n                    {% else %}\n                        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(test) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_fields #}\n                    {% endif %}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ test_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.595807, "supported_languages": null}, "macro.dbt_artifacts.upload_seed_executions": {"name": "upload_seed_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.upload_seed_executions", "macro_sql": "{% macro upload_seed_executions(seeds) -%}\n    {{ return(adapter.dispatch('get_seed_executions_dml_sql', 'dbt_artifacts')(seeds)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql"]}, "description": "The macro to support upload of the data to the seed_executions table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "seeds", "type": "list", "description": "A list of seed execution results objects extracted from the dbt result object\n"}], "created_at": 1695909258.3952594, "supported_languages": null}, "macro.dbt_artifacts.default__get_seed_executions_dml_sql": {"name": "default__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_seed_executions_dml_sql", "macro_sql": "{% macro default__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.6141346, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql": {"name": "bigquery__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_seed_executions_dml_sql", "macro_sql": "{% macro bigquery__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n                {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.619372, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql": {"name": "snowflake__get_seed_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_seed_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_seed_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_seed_executions_dml_sql", "macro_sql": "{% macro snowflake__get_seed_executions_dml_sql(seeds) -%}\n    {% if seeds != [] %}\n        {% set seed_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in seeds -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ seed_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.628124, "supported_languages": null}, "macro.dbt_artifacts.upload_invocations": {"name": "upload_invocations", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_invocations.sql", "original_file_path": "macros/upload_individual_datasets/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.upload_invocations", "macro_sql": "{% macro upload_invocations() -%}\n\n    {# Need to remove keys with results that can't be handled properly #}\n    {# warn_error_options - returns a python object in 1.5 #}\n    {% if 'warn_error_options' in invocation_args_dict %}\n        {% if invocation_args_dict.warn_error_options is not string %}\n            {% if invocation_args_dict.warn_error_options.include %}\n                {% set include_options = invocation_args_dict.warn_error_options.include %}\n            {% else %}\n                {% set include_options = '' %}\n            {% endif %}\n            {% if invocation_args_dict.warn_error_options.exclude %}\n                {% set exclude_options = invocation_args_dict.warn_error_options.exclude %}\n            {% else %}\n                {% set exclude_options = '' %}\n            {% endif %}\n            {% set warn_error_options = {'include': include_options, 'exclude': exclude_options} %}\n            {%- do invocation_args_dict.update({'warn_error_options': warn_error_options}) %}\n        {% endif %}\n    {% endif %}\n\n    {{ return(adapter.dispatch('get_invocations_dml_sql', 'dbt_artifacts')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_invocations_dml_sql"]}, "description": "The macro to support upload of the data to the invocations table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [], "created_at": 1695909258.3919601, "supported_languages": null}, "macro.dbt_artifacts.default__get_invocations_dml_sql": {"name": "default__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_invocations.sql", "original_file_path": "macros/upload_individual_datasets/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.default__get_invocations_dml_sql", "macro_sql": "{% macro default__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n    select\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n        {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }}, ''),\n        nullif({{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }}, ''),\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(17)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(18)) }},\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(19)) }}\n    from values\n    (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        '{{ flags.FULL_REFRESH }}', {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: (env_var(env_variable, '') | replace(\"'\", \"''\"))}) %}\n            {% endfor %}\n            '{{ tojson(env_vars_dict) }}', {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, '') | replace(\"'\", \"''\"))}) %}\n            {% endfor %}\n            '{{ tojson(dbt_vars_dict) }}', {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        '{{ tojson(invocation_args_dict) | replace('\\\\', '\\\\\\\\') | replace(\"'\", \"\\\\'\") }}', {# invocation_args #}\n\n        {% set metadata_env = {} %}\n        {% for key, value in dbt_metadata_envs.items() %}\n            {% do metadata_env.update({key: (value | replace(\"'\", \"''\"))}) %}\n        {% endfor %}\n        '{{ tojson(metadata_env) | replace('\\\\', '\\\\\\\\') }}' {# dbt_custom_envs #}\n\n    )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.649635, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_invocations_dml_sql": {"name": "bigquery__get_invocations_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_invocations.sql", "original_file_path": "macros/upload_individual_datasets/upload_invocations.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_invocations_dml_sql", "macro_sql": "{% macro bigquery__get_invocations_dml_sql() -%}\n    {% set invocation_values %}\n        (\n        '{{ invocation_id }}', {# command_invocation_id #}\n        '{{ dbt_version }}', {# dbt_version #}\n        '{{ project_name }}', {# project_name #}\n        '{{ run_started_at }}', {# run_started_at #}\n        '{{ flags.WHICH }}', {# dbt_command #}\n        {{ flags.FULL_REFRESH }}, {# full_refresh_flag #}\n        '{{ target.profile_name }}', {# target_profile_name #}\n        '{{ target.name }}', {# target_name #}\n        '{{ target.schema }}', {# target_schema #}\n        {{ target.threads }}, {# target_threads #}\n\n        '{{ env_var('DBT_CLOUD_PROJECT_ID', '') }}', {# dbt_cloud_project_id #}\n        '{{ env_var('DBT_CLOUD_JOB_ID', '') }}', {# dbt_cloud_job_id #}\n        '{{ env_var('DBT_CLOUD_RUN_ID', '') }}', {# dbt_cloud_run_id #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON_CATEGORY', '') }}', {# dbt_cloud_run_reason_category #}\n        '{{ env_var('DBT_CLOUD_RUN_REASON', '') | replace(\"'\",\"\\\\'\") }}', {# dbt_cloud_run_reason #}\n\n        {% if var('env_vars', none) %}\n            {% set env_vars_dict = {} %}\n            {% for env_variable in var('env_vars') %}\n                {% do env_vars_dict.update({env_variable: (env_var(env_variable, ''))}) %}\n            {% endfor %}\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(env_vars_dict)) }}, {# env_vars #}\n        {% else %}\n            null, {# env_vars #}\n        {% endif %}\n\n        {% if var('dbt_vars', none) %}\n            {% set dbt_vars_dict = {} %}\n            {% for dbt_var in var('dbt_vars') %}\n                {% do dbt_vars_dict.update({dbt_var: (var(dbt_var, ''))}) %}\n            {% endfor %}\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(dbt_vars_dict)) }}, {# dbt_vars #}\n        {% else %}\n            null, {# dbt_vars #}\n        {% endif %}\n\n        {% if invocation_args_dict.vars %}\n            {# vars - different format for pre v1.5 (yaml vs list) #}\n            {% if invocation_args_dict.vars is string %}\n                {# BigQuery does not handle the yaml-string from \"--vars\" well, when passed to \"parse_json\". Workaround is to parse the string, and then \"tojson\" will properly format the dict as a json-object. #}\n                {% set parsed_inv_args_vars = fromyaml(invocation_args_dict.vars) %}\n                {% do invocation_args_dict.update({'vars': parsed_inv_args_vars}) %}\n            {% endif %}\n        {% endif %}\n\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(invocation_args_dict) | replace(\"'\", \"\\\\'\")) }}, {# invocation_args #}\n\n        {% set metadata_env = {} %}\n        {% for key, value in dbt_metadata_envs.items() %}\n            {% do metadata_env.update({key: value}) %}\n        {% endfor %}\n        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(metadata_env) | replace('\\\\', '\\\\\\\\')) }} {# dbt_custom_envs #}\n\n        )\n    {% endset %}\n    {{ invocation_values }}\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.6563652, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshot_executions": {"name": "upload_snapshot_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.upload_snapshot_executions", "macro_sql": "{% macro upload_snapshot_executions(snapshots) -%}\n    {{ return(adapter.dispatch('get_snapshot_executions_dml_sql', 'dbt_artifacts')(snapshots)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql"]}, "description": "The macro to support upload of the data to the snapshot_executions table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "snapshots", "type": "list", "description": "A list of snapshot execution results objects extracted from the dbt result object\n"}], "created_at": 1695909258.3972766, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql": {"name": "default__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_snapshot_executions_dml_sql", "macro_sql": "{% macro default__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.674625, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql": {"name": "bigquery__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_snapshot_executions_dml_sql", "macro_sql": "{% macro bigquery__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Databricks #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n                {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.680081, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql": {"name": "snowflake__get_snapshot_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshot_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_snapshot_executions_dml_sql", "macro_sql": "{% macro snowflake__get_snapshot_executions_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% if model.timing != [] %}\n                    {% for stage in model.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in model.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.6885576, "supported_languages": null}, "macro.dbt_artifacts.upload_model_executions": {"name": "upload_model_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.upload_model_executions", "macro_sql": "{% macro upload_model_executions(models) -%}\n    {{ return(adapter.dispatch('get_model_executions_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.snowflake__get_model_executions_dml_sql"]}, "description": "The macro to support upload of the data to the model_executions table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "models", "type": "list", "description": "A list of model execution results objects extracted from the dbt result object\n"}], "created_at": 1695909258.393154, "supported_languages": null}, "macro.dbt_artifacts.default__get_model_executions_dml_sql": {"name": "default__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_model_executions_dml_sql", "macro_sql": "{% macro default__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n                {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n                {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n                {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                null, -- rows_affected not available {# Only available in Snowflake & BigQuery #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7057083, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql": {"name": "bigquery__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_model_executions_dml_sql", "macro_sql": "{% macro bigquery__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        {% for model in models -%}\n            (\n            '{{ invocation_id }}', {# command_invocation_id #}\n            '{{ model.node.unique_id }}', {# node_id #}\n            '{{ run_started_at }}', {# run_started_at #}\n\n            {% set config_full_refresh = model.node.config.full_refresh %}\n            {% if config_full_refresh is none %}\n                {% set config_full_refresh = flags.FULL_REFRESH %}\n            {% endif %}\n            {{ config_full_refresh }}, {# was_full_refresh #}\n\n            '{{ model.thread_id }}', {# thread_id #}\n            '{{ model.status }}', {# status #}\n\n            {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n            {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n            {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n            {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n            {{ model.execution_time }}, {# total_node_runtime #}\n            safe_cast('{{ model.adapter_response.rows_affected }}' as int64),\n            safe_cast('{{ model.adapter_response.bytes_processed }}' as int64),\n            '{{ model.node.config.materialized }}', {# materialization #}\n            '{{ model.node.schema }}', {# schema #}\n            '{{ model.node.name }}', {# name #}\n            '{{ model.node.alias }}', {# alias #}\n            '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.710829, "supported_languages": null}, "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql": {"name": "snowflake__get_model_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_model_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_model_executions.sql", "unique_id": "macro.dbt_artifacts.snowflake__get_model_executions_dml_sql", "macro_sql": "{% macro snowflake__get_model_executions_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(15) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(16)) }}\n        from values\n        {% for model in models -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = model.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ model.thread_id }}', {# thread_id #}\n                '{{ model.status }}', {# status #}\n\n                {% set compile_started_at = (model.timing | selectattr(\"name\", \"eq\", \"compile\") | first | default({}))[\"started_at\"] %}\n                {% if compile_started_at %}'{{ compile_started_at }}'{% else %}null{% endif %}, {# compile_started_at #}\n                {% set query_completed_at = (model.timing | selectattr(\"name\", \"eq\", \"execute\") | first | default({}))[\"completed_at\"] %}\n                {% if query_completed_at %}'{{ query_completed_at }}'{% else %}null{% endif %}, {# query_completed_at #}\n\n                {{ model.execution_time }}, {# total_node_runtime #}\n                try_cast('{{ model.adapter_response.rows_affected }}' as int), {# rows_affected #}\n                '{{ model.node.config.materialized }}', {# materialization #}\n                '{{ model.node.schema }}', {# schema #}\n                '{{ model.node.name }}', {# name #}\n                '{{ model.node.alias }}', {# alias #}\n                '{{ model.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(model.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7191489, "supported_languages": null}, "macro.dbt_artifacts.upload_test_executions": {"name": "upload_test_executions", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_test_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.upload_test_executions", "macro_sql": "{% macro upload_test_executions(tests) -%}\n    {{ return(adapter.dispatch('get_test_executions_dml_sql', 'dbt_artifacts')(tests)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_test_executions_dml_sql"]}, "description": "The macro to support upload of the data to the test_executions table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "tests", "type": "list", "description": "A list of test execution results objects extracted from the dbt result object\n"}], "created_at": 1695909258.3999212, "supported_languages": null}, "macro.dbt_artifacts.default__get_test_executions_dml_sql": {"name": "default__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_test_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.default__get_test_executions_dml_sql", "macro_sql": "{% macro default__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(12) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }}\n        from values\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                '{{ config_full_refresh }}', {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n                '{{ test.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}', {# message #}\n                '{{ tojson(test.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.731646, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql": {"name": "bigquery__get_test_executions_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_test_executions.sql", "original_file_path": "macros/upload_individual_datasets/upload_test_executions.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_test_executions_dml_sql", "macro_sql": "{% macro bigquery__get_test_executions_dml_sql(tests) -%}\n    {% if tests != [] %}\n        {% set test_execution_values %}\n        {% for test in tests -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ test.node.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n\n                {% set config_full_refresh = test.node.config.full_refresh %}\n                {% if config_full_refresh is none %}\n                    {% set config_full_refresh = flags.FULL_REFRESH %}\n                {% endif %}\n                {{ config_full_refresh }}, {# was_full_refresh #}\n\n                '{{ test.thread_id }}', {# thread_id #}\n                '{{ test.status }}', {# status #}\n\n                {% if test.timing != [] %}\n                    {% for stage in test.timing if stage.name == \"compile\" %}\n                        {% if loop.length == 0 %}\n                            null, {# compile_started_at #}\n                        {% else %}\n                            '{{ stage.started_at }}', {# compile_started_at #}\n                        {% endif %}\n                    {% endfor %}\n\n                    {% for stage in test.timing if stage.name == \"execute\" %}\n                        {% if loop.length == 0 %}\n                            null, {# query_completed_at #}\n                        {% else %}\n                            '{{ stage.completed_at }}', {# query_completed_at #}\n                        {% endif %}\n                    {% endfor %}\n                {% else %}\n                    null, {# compile_started_at #}\n                    null, {# query_completed_at #}\n                {% endif %}\n\n                {{ test.execution_time }}, {# total_node_runtime #}\n                null, {# rows_affected not available in Databricks #}\n                {{ 'null' if test.failures is none else test.failures }}, {# failures #}\n                '{{ test.message | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') | replace(\"\\n\", \"\\\\n\") }}', {# message #}\n                {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(test.adapter_response) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# adapter_response #}\n            )\n            {%- if not loop.last %},{%- endif %}\n\n        {%- endfor %}\n        {% endset %}\n        {{ test_execution_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7366018, "supported_languages": null}, "macro.dbt_artifacts.upload_snapshots": {"name": "upload_snapshots", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshots.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.upload_snapshots", "macro_sql": "{% macro upload_snapshots(snapshots) -%}\n\n    {{ return(adapter.dispatch('get_snapshots_dml_sql', 'dbt_artifacts')(snapshots)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_snapshots_dml_sql"]}, "description": "The macro to support upload of the data to the snapshots table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "snapshots", "type": "list", "description": "A list of snapshots objects extracted from the dbt graph\n"}], "created_at": 1695909258.3980157, "supported_languages": null}, "macro.dbt_artifacts.default__get_snapshots_dml_sql": {"name": "default__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshots.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.default__get_snapshots_dml_sql", "macro_sql": "{% macro default__get_snapshots_dml_sql(snapshots) -%}\n\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(13) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(14)) }}\n        from values\n        {% for snapshot in snapshots -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ snapshot.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ snapshot.database }}', {# database #}\n                '{{ snapshot.schema }}', {# schema #}\n                '{{ snapshot.name }}', {# name #}\n                '{{ tojson(snapshot.depends_on.nodes) }}', {# depends_on_nodes #}\n                '{{ snapshot.package_name }}', {# package_name #}\n                '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ snapshot.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n                '{{ snapshot.config.strategy }}', {# strategy #}\n                '{{ tojson(snapshot.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ snapshot.alias }}', {# alias #}\n                {% if var('dbt_artifacts_exclude_all_results', false) %}\n                    null\n                {% else %}\n                    '{{ tojson(snapshot) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n                {% endif %}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7496088, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql": {"name": "bigquery__get_snapshots_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_snapshots.sql", "original_file_path": "macros/upload_individual_datasets/upload_snapshots.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_snapshots_dml_sql", "macro_sql": "{% macro bigquery__get_snapshots_dml_sql(snapshots) -%}\n    {% if snapshots != [] %}\n        {% set snapshot_values %}\n            {% for snapshot in snapshots -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ snapshot.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ snapshot.database }}', {# database #}\n                    '{{ snapshot.schema }}', {# schema #}\n                    '{{ snapshot.name }}', {# name #}\n                    {{ tojson(snapshot.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ snapshot.package_name }}', {# package_name #}\n                    '{{ snapshot.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ snapshot.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n                    '{{ snapshot.config.strategy }}', {# strategy #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(snapshot.config.meta)) }}, {# meta #}\n                    '{{ snapshot.alias }}', {# alias #}\n                    {% if var('dbt_artifacts_exclude_all_results', false) %}\n                        null\n                    {% else %}\n                        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(snapshot) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                    {% endif %}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ snapshot_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.753322, "supported_languages": null}, "macro.dbt_artifacts.upload_sources": {"name": "upload_sources", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_sources.sql", "original_file_path": "macros/upload_individual_datasets/upload_sources.sql", "unique_id": "macro.dbt_artifacts.upload_sources", "macro_sql": "{% macro upload_sources(sources) -%}\n    {{ return(adapter.dispatch('get_sources_dml_sql', 'dbt_artifacts')(sources)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_sources_dml_sql"]}, "description": "The macro to support upload of the data to the sources table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "sources", "type": "list", "description": "A list of sources objects extracted from the dbt graph\n"}], "created_at": 1695909258.3991647, "supported_languages": null}, "macro.dbt_artifacts.default__get_sources_dml_sql": {"name": "default__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_sources.sql", "original_file_path": "macros/upload_individual_datasets/upload_sources.sql", "unique_id": "macro.dbt_artifacts.default__get_sources_dml_sql", "macro_sql": "{% macro default__get_sources_dml_sql(sources) -%}\n\n    {% if sources != [] %}\n        {% set source_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(7) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(11)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }}\n        from values\n        {% for source in sources -%}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ source.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ source.database }}', {# database #}\n                '{{ source.schema }}', {# schema #}\n                '{{ source.source_name }}', {# source_name #}\n                '{{ source.loader }}', {# loader #}\n                '{{ source.name }}', {# name #}\n                '{{ source.identifier }}', {# identifier #}\n                '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                '{{ tojson(source.freshness) | replace(\"'\",\"\\\\'\") }}', {# freshness #}\n                {% if var('dbt_artifacts_exclude_all_results', false) %}\n                    null\n                {% else %}\n                    '{{ tojson(source) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n                {% endif %}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.763723, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_sources_dml_sql": {"name": "bigquery__get_sources_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_sources.sql", "original_file_path": "macros/upload_individual_datasets/upload_sources.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_sources_dml_sql", "macro_sql": "{% macro bigquery__get_sources_dml_sql(sources) -%}\n    {% if sources != [] %}\n        {% set source_values %}\n            {% for source in sources -%}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ source.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ source.database }}', {# database #}\n                    '{{ source.schema }}', {# schema #}\n                    '{{ source.source_name }}', {# source_name #}\n                    '{{ source.loader }}', {# loader #}\n                    '{{ source.name }}', {# name #}\n                    '{{ source.identifier }}', {# identifier #}\n                    '{{ source.loaded_at_field | replace(\"'\",\"\\\\'\") }}', {# loaded_at_field #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(source.freshness) | replace(\"'\",\"\\\\'\")) }},  {# freshness #}\n                    {% if var('dbt_artifacts_exclude_all_results', false) %}\n                        null\n                    {% else %}\n                        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(source) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                    {% endif %}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ source_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7671306, "supported_languages": null}, "macro.dbt_artifacts.upload_models": {"name": "upload_models", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_models.sql", "original_file_path": "macros/upload_individual_datasets/upload_models.sql", "unique_id": "macro.dbt_artifacts.upload_models", "macro_sql": "{% macro upload_models(models) -%}\n    {{ return(adapter.dispatch('get_models_dml_sql', 'dbt_artifacts')(models)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.default__get_models_dml_sql"]}, "description": "The macro to support upload of the data to the models table.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_artifacts://macros/_macros.yml", "arguments": [{"name": "models", "type": "list", "description": "A list of test objects extracted from the dbt graph\n"}], "created_at": 1695909258.393891, "supported_languages": null}, "macro.dbt_artifacts.default__get_models_dml_sql": {"name": "default__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_models.sql", "original_file_path": "macros/upload_individual_datasets/upload_models.sql", "unique_id": "macro.dbt_artifacts.default__get_models_dml_sql", "macro_sql": "{% macro default__get_models_dml_sql(models) -%}\n\n    {% if models != [] %}\n        {% set model_values %}\n        select\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(1) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(2) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(3) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(4) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(5) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(6) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(7)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(8) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(9) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(10) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(11) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(12)) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(13)) }},\n            {{ adapter.dispatch('column_identifier', 'dbt_artifacts')(14) }},\n            {{ adapter.dispatch('parse_json', 'dbt_artifacts')(adapter.dispatch('column_identifier', 'dbt_artifacts')(15)) }}\n        from values\n        {% for model in models -%}\n                {% do model.pop('raw_code', None) %}\n            (\n                '{{ invocation_id }}', {# command_invocation_id #}\n                '{{ model.unique_id }}', {# node_id #}\n                '{{ run_started_at }}', {# run_started_at #}\n                '{{ model.database }}', {# database #}\n                '{{ model.schema }}', {# schema #}\n                '{{ model.name }}', {# name #}\n                '{{ tojson(model.depends_on.nodes) | replace('\\\\', '\\\\\\\\') }}', {# depends_on_nodes #}\n                '{{ model.package_name }}', {# package_name #}\n                '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                '{{ model.checksum.checksum  | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n                '{{ model.config.materialized }}', {# materialization #}\n                '{{ tojson(model.tags) }}', {# tags #}\n                '{{ tojson(model.config.meta) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}', {# meta #}\n                '{{ model.alias }}', {# alias #}\n                {% if var('dbt_artifacts_exclude_all_results', false) %}\n                    null\n                {% else %}\n                    '{{ tojson(model) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"') }}' {# all_results #}\n                {% endif %}\n            )\n            {%- if not loop.last %},{%- endif %}\n        {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.column_identifier", "macro.dbt_artifacts.snowflake__column_identifier", "macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.781069, "supported_languages": null}, "macro.dbt_artifacts.bigquery__get_models_dml_sql": {"name": "bigquery__get_models_dml_sql", "resource_type": "macro", "package_name": "dbt_artifacts", "path": "macros/upload_individual_datasets/upload_models.sql", "original_file_path": "macros/upload_individual_datasets/upload_models.sql", "unique_id": "macro.dbt_artifacts.bigquery__get_models_dml_sql", "macro_sql": "{% macro bigquery__get_models_dml_sql(models) -%}\n    {% if models != [] %}\n        {% set model_values %}\n            {% for model in models -%}\n                {% do model.pop('raw_code', None) %}\n                (\n                    '{{ invocation_id }}', {# command_invocation_id #}\n                    '{{ model.unique_id }}', {# node_id #}\n                    '{{ run_started_at }}', {# run_started_at #}\n                    '{{ model.database }}', {# database #}\n                    '{{ model.schema }}', {# schema #}\n                    '{{ model.name }}', {# name #}\n                    {{ tojson(model.depends_on.nodes) }}, {# depends_on_nodes #}\n                    '{{ model.package_name }}', {# package_name #}\n                    '{{ model.original_file_path | replace('\\\\', '\\\\\\\\') }}', {# path #}\n                    '{{ model.checksum.checksum | replace('\\\\', '\\\\\\\\') }}', {# checksum #}\n                    '{{ model.config.materialized }}', {# materialization #}\n                    {{ tojson(model.tags) }}, {# tags #}\n                    {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model.config.meta)) }}, {# meta #}\n                    '{{ model.alias }}', {# alias #}\n                    {% if var('dbt_artifacts_exclude_all_results', false) %}\n                        null\n                    {% else %}\n                        {{ adapter.dispatch('parse_json', 'dbt_artifacts')(tojson(model) | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\",\"\\\\'\") | replace('\"', '\\\\\"')) }} {# all_results #}\n                    {% endif %}\n                )\n                {%- if not loop.last %},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n        {{ model_values }}\n    {% else %}\n        {{ return(\"\") }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_artifacts.parse_json", "macro.dbt_artifacts.snowflake__parse_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7849984, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7858098, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7861993, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n          where (\n            {%- for schema in schemas -%}\n              upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n          where (\n            {%- for schema in schemas -%}\n              upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.7891035, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8242455, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8262622, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.827132, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8296163, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8300462, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8320067, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8334365, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {%- set paginated_sql -%}\n         show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n      {%- endset -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8361938, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8386545, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8397117, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8402758, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8409512, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8418317, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8435352, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8440404, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8444834, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.845705, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8462, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8477979, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8505504, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8512402, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.85193, "supported_languages": null}, "macro.dbt_snowflake.snowflake__drop_relation": {"name": "snowflake__drop_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__drop_relation", "macro_sql": "{% macro snowflake__drop_relation(relation) -%}\n    {%- if relation.is_dynamic_table -%}\n        {% call statement('drop_relation', auto_begin=False) -%}\n            drop dynamic table if exists {{ relation }}\n        {%- endcall %}\n    {%- else -%}\n        {{- default__drop_relation(relation) -}}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8526652, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.853166, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.853842, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8543186, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8546145, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8549016, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8552802, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.85588, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.856253, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.856747, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.857302, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8604894, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8613317, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8620195, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8634331, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8643854, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.869856, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.870671, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8763876, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8772259, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.877664, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8836038, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8922384, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8927166, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8933365, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.8940954, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.895013, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.DynamicTable if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ dynamic_table_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ dynamic_table_execute_no_op(target_relation) }}\n        {% else %}\n            {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ dynamic_table_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt_snowflake.dynamic_table_setup", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.dynamic_table_teardown", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9057775, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_setup": {"name": "dynamic_table_setup", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_setup", "macro_sql": "{% macro dynamic_table_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ snowflake__get_drop_dynamic_table_sql(preexisting_backup_relation) }}\n    {{ snowflake__get_drop_dynamic_table_sql(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9068851, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_teardown": {"name": "dynamic_table_teardown", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_teardown", "macro_sql": "{% macro dynamic_table_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ snowflake__get_drop_dynamic_table_sql(backup_relation) }}\n    {{ snowflake__get_drop_dynamic_table_sql(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.907734, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = snowflake__get_create_dynamic_table_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9112904, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9119184, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/materialization.sql", "original_file_path": "macros/materializations/dynamic_table/materialization.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.91323, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    target_relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) -%}\n    {{- log('Applying ALTER to: ' ~ target_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9200134, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9208834, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.921851, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql": {"name": "snowflake__get_replace_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) -%}\n    {{- log('Applying REPLACE to: ' ~ target_relation) -}}\n    {{ snowflake__get_drop_dynamic_table_sql(existing_relation) }};\n    {{ snowflake__get_create_dynamic_table_as_sql(target_relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9225533, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9229813, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9237237, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table/ddl.sql", "original_file_path": "macros/materializations/dynamic_table/ddl.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.924025, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9248886, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9255254, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.92708, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9279857, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.93166, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9320867, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9341574, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9352438, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9367583, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9380682, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9382982, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.938964, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9392786, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.940032, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9404197, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9413555, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9418116, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9424648, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9428184, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.943698, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9441462, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.944747, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.945108, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.945825, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9461827, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9468904, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9471848, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9480016, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9484515, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9492323, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.949614, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9502802, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9507153, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9515584, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.951954, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.953554, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9546244, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9555268, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.956223, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.956628, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9574366, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9578993, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9585817, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9588068, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9595363, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9599097, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9605505, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9609866, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9634447, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9638689, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9643013, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9647086, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9651418, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9655607, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9660003, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9664824, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9669206, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9673536, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9677966, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9684238, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_artifacts.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9688828, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9692812, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9705427, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9710023, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9716492, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9723508, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9726963, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9735303, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9739757, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.974773, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9751773, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9761705, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9769826, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9800634, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.980615, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.981078, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9814816, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9818783, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9827893, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9838028, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.984611, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9922876, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.993042, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9934964, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9939866, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9944217, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9947495, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.995317, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9976153, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.998139, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909256.9989583, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.00013, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0076473, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0082574, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0089657, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.011021, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0116346, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0122433, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.016374, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0204482, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.035546, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0366502, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0373702, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0384166, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0394373, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0405343, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0419798, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0475209, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.048434, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0491586, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0528762, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.061456, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0627267, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0631971, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0637565, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.06667, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.068805, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0694427, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0700533, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0708277, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0713444, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0721352, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.072654, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.073485, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0740185, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0744452, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0751798, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0867617, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0915594, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0922594, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0948267, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.095552, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.0972044, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1091397, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.112747, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1141682, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1159043, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1165364, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1183782, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1199644, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1307387, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1338732, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.137195, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1394083, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1414354, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1419294, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1430345, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1447632, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1459699, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1464756, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1469617, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1537895, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1560595, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1563954, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1577764, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1582317, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1586041, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1621375, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.16316, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1640878, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1648989, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1652644, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1661162, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1665027, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1766198, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1776416, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1783044, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1817706, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1824074, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1841946, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1852705, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1857522, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1869533, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1874814, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.188535, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.18894, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1896966, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1900785, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1906946, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.191186, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.1986027, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2082086, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.210526, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2111478, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2125509, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2130857, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2134573, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2138417, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2141714, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2146046, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.214928, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2162662, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.216785, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.220073, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2278254, "supported_languages": ["sql"]}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.228902, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2298796, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2308538, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2316098, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.232931, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2336392, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2343926, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.239889, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2430649, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2452013, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.24585, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.249542, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2510576, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2518668, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.256528, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2570317, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.257855, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2584376, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2589858, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.259504, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.261464, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2623918, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.262996, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.263947, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2645557, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2662387, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2669122, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2689424, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2729566, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2741249, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2746215, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.274911, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2753918, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.275794, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.276274, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2765694, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2775989, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2787166, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.28063, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2810154, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.281443, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2824795, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.282981, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.283375, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2838013, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2841468, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2852743, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2859693, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2863817, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2866783, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.287124, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2873628, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.287803, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2882423, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2891574, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2896547, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.290086, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2905743, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2921233, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2925854, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2931259, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2935753, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2942674, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.295644, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2993093, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.2996545, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3003638, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.300711, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3015974, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3020954, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3023853, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3029783, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.303516, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3041203, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3046236, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3052225, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3070912, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3076422, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3083146, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3089182, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3121138, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3177295, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3181946, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3187609, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3195395, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3201833, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3210168, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.321515, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.321966, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3225014, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3232682, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3239226, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.325384, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3260908, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3266122, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3271437, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3279178, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.328529, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3316402, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3324873, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.332992, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3334155, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.333888, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.334531, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3350756, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.335884, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3364828, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3369436, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.338154, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3387725, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3395593, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695909257.3402867, "supported_languages": null}}, "docs": {"doc.dbt_artifacts.command_invocation_id": {"name": "command_invocation_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.command_invocation_id", "block_contents": "The invocation_id is a UUID generated by dbt for each invocation. It can be used to link records which were generated by the same dbt invocation."}, "doc.dbt_artifacts.node_id": {"name": "node_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.node_id", "block_contents": "Unique node identifier."}, "doc.dbt_artifacts.name": {"name": "name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.name", "block_contents": "Name of the node."}, "doc.dbt_artifacts.schema": {"name": "schema", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.schema", "block_contents": "Configured schema for the node."}, "doc.dbt_artifacts.package_name": {"name": "package_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.package_name", "block_contents": "Name of the dbt package which contains the node."}, "doc.dbt_artifacts.total_node_runtime": {"name": "total_node_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.total_node_runtime", "block_contents": "Total time spent executing this node (seconds)."}, "doc.dbt_artifacts.compile_started_at": {"name": "compile_started_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.compile_started_at", "block_contents": "Timestamp when the node started compiling."}, "doc.dbt_artifacts.depends_on_nodes": {"name": "depends_on_nodes", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.depends_on_nodes", "block_contents": "Array of node identifiers that this node depends on in the execution graph."}, "doc.dbt_artifacts.status": {"name": "status", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.status", "block_contents": "Represents the execution status of a node, can be success, failure, or error."}, "doc.dbt_artifacts.query_completed_at": {"name": "query_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.query_completed_at", "block_contents": "Timestamp when the node's SQL query completed."}, "doc.dbt_artifacts.materialization": {"name": "materialization", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.materialization", "block_contents": "The materialization of the model."}, "doc.dbt_artifacts.database": {"name": "database", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.database", "block_contents": "The configured database for the node."}, "doc.dbt_artifacts.rows_affected": {"name": "rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.rows_affected", "block_contents": "Number of rows affected by the model execution."}, "doc.dbt_artifacts.bytes_processed": {"name": "bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.bytes_processed", "block_contents": "Number of bytes processed by the model execution."}, "doc.dbt_artifacts.thread_id": {"name": "thread_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.thread_id", "block_contents": "Which thread executed this node? E.g. Thread-1"}, "doc.dbt_artifacts.path": {"name": "path", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.path", "block_contents": "Path to the model on the local filesystem."}, "doc.dbt_artifacts.was_full_refresh": {"name": "was_full_refresh", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.was_full_refresh", "block_contents": "Boolean flag indicating whether the nodes run was a full refresh or not."}, "doc.dbt_artifacts.checksum": {"name": "checksum", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.checksum", "block_contents": "Checksum of the model."}, "doc.dbt_artifacts.seed_execution_id": {"name": "seed_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.seed_execution_id", "block_contents": "Execution ID of the seed node."}, "doc.dbt_artifacts.test_execution_id": {"name": "test_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.test_execution_id", "block_contents": "Execution ID of the test node."}, "doc.dbt_artifacts.snapshot_execution_id": {"name": "snapshot_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.snapshot_execution_id", "block_contents": "Execution ID of the snapshot node."}, "doc.dbt_artifacts.model_execution_id": {"name": "model_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.model_execution_id", "block_contents": "Execution ID of the model node."}, "doc.dbt_artifacts.loader": {"name": "loader", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.loader", "block_contents": "Describes the tool that loads this source into your warehouse."}, "doc.dbt_artifacts.freshness": {"name": "freshness", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.freshness", "block_contents": "The specified freshness of the source model."}, "doc.dbt_artifacts.url": {"name": "url", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.url", "block_contents": "The URL of the BI tool where the data defined by the exposure can be viewed."}, "doc.dbt_artifacts.identifier": {"name": "identifier", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.identifier", "block_contents": "Source identifier."}, "doc.dbt_artifacts.source_name": {"name": "source_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.source_name", "block_contents": "Source name."}, "doc.dbt_artifacts.test_path": {"name": "test_path", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.test_path", "block_contents": "Path to the yaml (SQL in case of a singular test) file describing the test."}, "doc.dbt_artifacts.tags": {"name": "tags", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.tags", "block_contents": "Tags used in resource selection associated with the node."}, "doc.dbt_artifacts.strategy": {"name": "strategy", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.strategy", "block_contents": "Snapshot \"strategies\" define how dbt knows if a row has changed. There are two strategies built-in to dbt \u2014 timestamp\nand check."}, "doc.dbt_artifacts.failures": {"name": "failures", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.failures", "block_contents": "Test failures. Value is 1 if the test failed, 0 if successful."}, "doc.dbt_artifacts.loaded_at_field": {"name": "loaded_at_field", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.loaded_at_field", "block_contents": "A column name (or expression) that returns a timestamp indicating freshness."}, "doc.dbt_artifacts.type": {"name": "type", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.type", "block_contents": "Exposure type; one of dashboard, notebook, analysis, ml, application (used to organize on docs site)"}, "doc.dbt_artifacts.description": {"name": "description", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.description", "block_contents": "Node description."}, "doc.dbt_artifacts.maturity": {"name": "maturity", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.maturity", "block_contents": "Exposure maturity; one of high, medium, low."}, "doc.dbt_artifacts.owner": {"name": "owner", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.owner", "block_contents": "Owner of the exposure, usually an email address."}, "doc.dbt_artifacts.source_execution_id": {"name": "source_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.source_execution_id", "block_contents": "Execution ID of the source node."}, "doc.dbt_artifacts.exposure_execution_id": {"name": "exposure_execution_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.exposure_execution_id", "block_contents": "Execution ID of the exposure node."}, "doc.dbt_artifacts.dbt_version": {"name": "dbt_version", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_version", "block_contents": "Installed version of dbt that is currently running."}, "doc.dbt_artifacts.project_name": {"name": "project_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.project_name", "block_contents": "Name for the root-level project which is being run by dbt."}, "doc.dbt_artifacts.run_started_at": {"name": "run_started_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.run_started_at", "block_contents": "The start timestamp of the dbt execution which generated the record."}, "doc.dbt_artifacts.dbt_command": {"name": "dbt_command", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_command", "block_contents": "dbt command of this run."}, "doc.dbt_artifacts.full_refresh_flag": {"name": "full_refresh_flag", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.full_refresh_flag", "block_contents": "Boolean flag indicating whether the dbt run was in full refresh mode or not."}, "doc.dbt_artifacts.target_profile_name": {"name": "target_profile_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_profile_name", "block_contents": "The name of the active profile."}, "doc.dbt_artifacts.target_name": {"name": "target_name", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_name", "block_contents": "The name of the active target."}, "doc.dbt_artifacts.target_schema": {"name": "target_schema", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_schema", "block_contents": "The name of the target dbt schema."}, "doc.dbt_artifacts.target_threads": {"name": "target_threads", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.target_threads", "block_contents": "The number of threads in use by dbt."}, "doc.dbt_artifacts.dbt_cloud_project_id": {"name": "dbt_cloud_project_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_project_id", "block_contents": "The ID of the dbt Cloud Project for this run."}, "doc.dbt_artifacts.dbt_cloud_job_id": {"name": "dbt_cloud_job_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_job_id", "block_contents": "The ID of the dbt Cloud Job for this run."}, "doc.dbt_artifacts.dbt_cloud_run_id": {"name": "dbt_cloud_run_id", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_id", "block_contents": "The ID of this particular run."}, "doc.dbt_artifacts.dbt_cloud_run_reason_category": {"name": "dbt_cloud_run_reason_category", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_reason_category", "block_contents": "The \"category\" of the trigger for this run."}, "doc.dbt_artifacts.dbt_cloud_run_reason": {"name": "dbt_cloud_run_reason", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_cloud_run_reason", "block_contents": "The specific trigger for this run."}, "doc.dbt_artifacts.env_vars": {"name": "env_vars", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.env_vars", "block_contents": "Key-value pairs of environment variables to be capture."}, "doc.dbt_artifacts.dbt_vars": {"name": "dbt_vars", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_vars", "block_contents": "Key-value pairs of project variables to be capture."}, "doc.dbt_artifacts.last_full_refresh_run_completed_at": {"name": "last_full_refresh_run_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_rows_affected": {"name": "last_full_refresh_run_rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_rows_affected", "block_contents": "Number of rows affected by the node's last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_bytes_processed": {"name": "last_full_refresh_run_bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last full (non-incremental) run."}, "doc.dbt_artifacts.last_full_refresh_run_total_runtime": {"name": "last_full_refresh_run_total_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_full_refresh_run_total_runtime", "block_contents": "Total time spent executing the node's last full (non-incremental) run (seconds)."}, "doc.dbt_artifacts.last_run_completed_at": {"name": "last_run_completed_at", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_completed_at", "block_contents": "Timestamp when the node's SQL query completed on the last run."}, "doc.dbt_artifacts.last_run_rows_affected": {"name": "last_run_rows_affected", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_rows_affected", "block_contents": "Number of rows affected by the node's last run."}, "doc.dbt_artifacts.last_run_bytes_processed": {"name": "last_run_bytes_processed", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_bytes_processed", "block_contents": "Number of bytes processed by the node's last run."}, "doc.dbt_artifacts.last_run_total_runtime": {"name": "last_run_total_runtime", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.last_run_total_runtime", "block_contents": "Total time spent executing the node's last run (seconds)."}, "doc.dbt_artifacts.meta": {"name": "meta", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.meta", "block_contents": "The meta field of the config associated with the node."}, "doc.dbt_artifacts.invocation_args": {"name": "invocation_args", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.invocation_args", "block_contents": "Key-value pairs of args passed to invocation."}, "doc.dbt_artifacts.dbt_custom_envs": {"name": "dbt_custom_envs", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.dbt_custom_envs", "block_contents": "Key-value pairs of environment variables passed to invocation that have the prefix DBT_ENV_CUSTOM_ENV_"}, "doc.dbt_artifacts.alias": {"name": "alias", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.alias", "block_contents": "Alias of the node."}, "doc.dbt_artifacts.message": {"name": "message", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.message", "block_contents": "Result report, based on information returned from the database"}, "doc.dbt_artifacts.adapter_response": {"name": "adapter_response", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.adapter_response", "block_contents": "Response provided by the adapter as JSON."}, "doc.dbt_artifacts.all_results": {"name": "all_results", "resource_type": "doc", "package_name": "dbt_artifacts", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.dbt_artifacts.all_results", "block_contents": "All results as a JSON blob"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_artifacts.dim_dbt__current_models": ["model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.dim_dbt__tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.fct_dbt__invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.fct_dbt__model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.dim_dbt__models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.fct_dbt__seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.dim_dbt__snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.fct_dbt__snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.dim_dbt__seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.fct_dbt__test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.sources": [], "model.dbt_artifacts.tests": [], "model.dbt_artifacts.seeds": [], "model.dbt_artifacts.snapshot_executions": [], "model.dbt_artifacts.models": [], "model.dbt_artifacts.exposures": [], "model.dbt_artifacts.model_executions": [], "model.dbt_artifacts.seed_executions": [], "model.dbt_artifacts.snapshots": [], "model.dbt_artifacts.test_executions": [], "model.dbt_artifacts.invocations": [], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.seed_executions"], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.invocations"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.model_executions"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.snapshot_executions"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.test_executions"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.seeds"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.sources"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.models"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.tests"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.snapshots"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.exposures"]}, "child_map": {"model.dbt_artifacts.dim_dbt__current_models": [], "model.dbt_artifacts.dim_dbt__sources": [], "model.dbt_artifacts.dim_dbt__tests": [], "model.dbt_artifacts.fct_dbt__invocations": [], "model.dbt_artifacts.fct_dbt__model_executions": [], "model.dbt_artifacts.dim_dbt__models": [], "model.dbt_artifacts.dim_dbt__exposures": [], "model.dbt_artifacts.fct_dbt__seed_executions": [], "model.dbt_artifacts.dim_dbt__snapshots": [], "model.dbt_artifacts.fct_dbt__snapshot_executions": [], "model.dbt_artifacts.dim_dbt__seeds": [], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.tests": ["model.dbt_artifacts.stg_dbt__tests"], "model.dbt_artifacts.seeds": ["model.dbt_artifacts.stg_dbt__seeds"], "model.dbt_artifacts.snapshot_executions": ["model.dbt_artifacts.stg_dbt__snapshot_executions"], "model.dbt_artifacts.models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.seed_executions": ["model.dbt_artifacts.stg_dbt__seed_executions"], "model.dbt_artifacts.snapshots": ["model.dbt_artifacts.stg_dbt__snapshots"], "model.dbt_artifacts.test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.invocations": ["model.dbt_artifacts.stg_dbt__invocations"], "model.dbt_artifacts.stg_dbt__seed_executions": ["model.dbt_artifacts.fct_dbt__seed_executions"], "model.dbt_artifacts.stg_dbt__invocations": ["model.dbt_artifacts.fct_dbt__invocations"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.fct_dbt__model_executions"], "model.dbt_artifacts.stg_dbt__snapshot_executions": ["model.dbt_artifacts.fct_dbt__snapshot_executions"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.fct_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__seeds": ["model.dbt_artifacts.dim_dbt__seeds"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.dim_dbt__sources"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.dim_dbt__current_models", "model.dbt_artifacts.dim_dbt__models"], "model.dbt_artifacts.stg_dbt__tests": ["model.dbt_artifacts.dim_dbt__tests"], "model.dbt_artifacts.stg_dbt__snapshots": ["model.dbt_artifacts.dim_dbt__snapshots"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.dim_dbt__exposures"]}, "group_map": {}, "semantic_models": {}}